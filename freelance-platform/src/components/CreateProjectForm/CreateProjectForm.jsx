import './CreateProjectForm.scss'
import { useState } from 'react'
import { useUser } from '../../contexts/UserContext'

function CreateProjectForm({ onSuccess, onCancel }) {
  const { user } = useUser()
  
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    category: 'development',
    budget: '',
    deadline: '',
    skills: []
  })

  const [currentSkill, setCurrentSkill] = useState('')

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–∫–∞–∑—á–∏–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (user?.role !== 'client') {
    return (
      <div className="not-client-message">
        <h2>–¢–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤</h2>
        <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–∞–∫ –∑–∞–∫–∞–∑—á–∏–∫</p>
        <button onClick={onCancel}>–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</button>
      </div>
    )
  }

  const handleSubmit = (e) => {
    e.preventDefault()
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.title.trim() || !formData.description.trim() || !formData.budget) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ localStorage
    const projects = JSON.parse(localStorage.getItem('nexus_projects') || '[]')
    const newProject = {
      id: Date.now().toString(),
      ...formData,
      client: {
        id: user.id,
        name: user.profile.name,
        avatar: user.profile.avatar
      },
      createdAt: new Date().toISOString(),
      status: 'open',
      responses: [],
      views: 0
    }
    
    projects.unshift(newProject) // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
    localStorage.setItem('nexus_projects', JSON.stringify(projects))
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    setFormData({
      title: '',
      description: '',
      category: 'development',
      budget: '',
      deadline: '',
      skills: []
    })
    
    // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —É—Å–ø–µ—Ö–∞
    onSuccess?.()
  }

  const addSkill = () => {
    if (currentSkill.trim() && !formData.skills.includes(currentSkill.trim())) {
      setFormData({
        ...formData,
        skills: [...formData.skills, currentSkill.trim()]
      })
      setCurrentSkill('')
    }
  }

  const removeSkill = (skillToRemove) => {
    setFormData({
      ...formData,
      skills: formData.skills.filter(skill => skill !== skillToRemove)
    })
  }

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && e.target.name !== 'description') {
      e.preventDefault()
      if (e.target.name === 'skill') {
        addSkill()
      }
    }
  }

  return (
    <div className="create-project-form">
      <div className="form-header">
        <h2>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</h2>
        <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ</p>
      </div>

      <form onSubmit={handleSubmit}>
        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ */}
        <div className="form-group">
          <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *</label>
          <input 
            type="text" 
            id="title"
            name="title"
            value={formData.title}
            onChange={(e) => setFormData({...formData, title: e.target.value})}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏"
            required
          />
        </div>

        {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
        <div className="form-group">
          <label htmlFor="description">–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ *</label>
          <textarea 
            id="description"
            name="description"
            value={formData.description}
            onChange={(e) => setFormData({...formData, description: e.target.value})}
            placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ–¥—Ä–æ–±–Ω–æ:
‚Ä¢ –¶–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É  
‚Ä¢ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è
‚Ä¢ –ö—Ä–∏—Ç–µ—Ä–∏–∏ —É—Å–ø–µ—Ö–∞"
            rows="6"
            required
          />
        </div>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –±—é–¥–∂–µ—Ç –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
        <div className="form-row">
          <div className="form-group">
            <label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
            <select 
              id="category"
              name="category"
              value={formData.category}
              onChange={(e) => setFormData({...formData, category: e.target.value})}
            >
              <option value="development">üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞</option>
              <option value="design">üé® –î–∏–∑–∞–π–Ω</option>
              <option value="marketing">üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</option>
              <option value="writing">üìù –¢–µ–∫—Å—Ç—ã</option>
              <option value="seo">üîç SEO</option>
              <option value="other">üîß –î—Ä—É–≥–æ–µ</option>
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="budget">–ë—é–¥–∂–µ—Ç (‚ÇΩ) *</label>
            <input 
              type="number" 
              id="budget"
              name="budget"
              value={formData.budget}
              onChange={(e) => setFormData({...formData, budget: e.target.value})}
              placeholder="5000"
              min="1000"
              required
            />
          </div>
        </div>

        {/* –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
        <div className="form-group">
          <label htmlFor="deadline">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
          <input 
            type="text" 
            id="deadline"
            name="deadline"
            value={formData.deadline}
            onChange={(e) => setFormData({...formData, deadline: e.target.value})}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 7 –¥–Ω–µ–π, 2 –Ω–µ–¥–µ–ª–∏, 1 –º–µ—Å—è—Ü"
          />
        </div>

        {/* –ù–∞–≤—ã–∫–∏ */}
        <div className="form-group">
          <label htmlFor="skill">–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏</label>
          <div className="skills-input-container">
            <input 
              type="text" 
              id="skill"
              name="skill"
              value={currentSkill}
              onChange={(e) => setCurrentSkill(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: React, Figma, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥"
            />
            <button type="button" onClick={addSkill} className="add-skill-btn">
              +
            </button>
          </div>
          
          {/* –°–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ */}
          {formData.skills.length > 0 && (
            <div className="skills-list">
              {formData.skills.map(skill => (
                <span key={skill} className="skill-tag">
                  {skill}
                  <button 
                    type="button" 
                    onClick={() => removeSkill(skill)}
                    className="remove-skill"
                  >
                    √ó
                  </button>
                </span>
              ))}
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <div className="form-actions">
          <button type="button" onClick={onCancel} className="cancel-btn">
            –û—Ç–º–µ–Ω–∞
          </button>
          <button type="submit" className="submit-btn">
            üöÄ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
          </button>
        </div>
      </form>
    </div>
  )
}

export default CreateProjectForm