// components/CreateProjectForm/CreateProjectForm.jsx
import { useState } from 'react';
import { useUser } from '../../contexts/UserContext';
import './CreateProjectForm.scss';

function CreateProjectForm({ onSuccess, onCancel }) {
  const { user, createProject } = useUser();
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const [projectData, setProjectData] = useState({
    title: '',
    description: '',
    category: 'development',
    budget: '',
    deadline: '',
    skills: []
  });

  const [newSkill, setNewSkill] = useState('');

  const categories = [
    { value: 'development', label: 'üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
    { value: 'design', label: 'üé® –î–∏–∑–∞–π–Ω' },
    { value: 'marketing', label: 'üìà –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥' },
    { value: 'writing', label: '‚úçÔ∏è –ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥' },
    { value: 'seo', label: 'üîç SEO' },
    { value: 'other', label: 'üîß –î—Ä—É–≥–æ–µ' }
  ];

  const handleChange = (e) => {
    const { name, value } = e.target;
    setProjectData(prev => ({
      ...prev,
      [name]: value
    }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const addSkill = () => {
    if (newSkill.trim() && !projectData.skills.includes(newSkill.trim())) {
      setProjectData(prev => ({
        ...prev,
        skills: [...prev.skills, newSkill.trim()]
      }));
      setNewSkill('');
    }
  };

  const removeSkill = (skillToRemove) => {
    setProjectData(prev => ({
      ...prev,
      skills: prev.skills.filter(skill => skill !== skillToRemove)
    }));
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      addSkill();
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!projectData.title.trim()) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (projectData.title.length < 5) {
      newErrors.title = '–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (!projectData.description.trim()) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    } else if (projectData.description.length < 10) {
      newErrors.description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (!projectData.budget || projectData.budget < 1000) {
      newErrors.budget = '–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1000 —Ä—É–±–ª–µ–π';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!user) {
      alert('–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
      return;
    }

    if (!validateForm()) {
      return;
    }

    setLoading(true);
    setErrors({});

    try {
      const result = await createProject({
        ...projectData,
        budget: parseInt(projectData.budget),
        deadline: projectData.deadline || undefined
      });

      if (result.success) {
        alert('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
        onSuccess?.();
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: ' + result.error);
      }
    } catch (error) {
      console.error('Error creating project:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  if (!user) {
    return (
      <div className="create-project-form">
        <div className="not-authorized">
          <h2>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
          <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</p>
        </div>
      </div>
    );
  }

  return (
    <div className="create-project-form">
      <div className="form-header">
        <h1>üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç</h1>
        <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ</p>
      </div>

      <form onSubmit={handleSubmit} className="project-form">
        <div className="form-group">
          <label htmlFor="title">–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *</label>
          <input
            type="text"
            id="title"
            name="title"
            value={projectData.title}
            onChange={handleChange}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            className={errors.title ? 'error' : ''}
          />
          {errors.title && <span className="error-text">{errors.title}</span>}
        </div>

        <div className="form-group">
          <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ *</label>
          <textarea
            id="description"
            name="description"
            value={projectData.description}
            onChange={handleChange}
            placeholder="–û–ø–∏—à–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –æ–∂–∏–¥–∞–Ω–∏—è..."
            rows="6"
            className={errors.description ? 'error' : ''}
          />
          {errors.description && <span className="error-text">{errors.description}</span>}
        </div>

        <div className="form-row">
          <div className="form-group">
            <label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
            <select
              id="category"
              name="category"
              value={projectData.category}
              onChange={handleChange}
            >
              {categories.map(cat => (
                <option key={cat.value} value={cat.value}>
                  {cat.label}
                </option>
              ))}
            </select>
          </div>

          <div className="form-group">
            <label htmlFor="budget">–ë—é–¥–∂–µ—Ç (‚ÇΩ) *</label>
            <input
              type="number"
              id="budget"
              name="budget"
              value={projectData.budget}
              onChange={handleChange}
              placeholder="5000"
              min="1000"
              className={errors.budget ? 'error' : ''}
            />
            {errors.budget && <span className="error-text">{errors.budget}</span>}
          </div>
        </div>

        <div className="form-group">
          <label htmlFor="deadline">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
          <input
            type="date"
            id="deadline"
            name="deadline"
            value={projectData.deadline}
            onChange={handleChange}
            min={new Date().toISOString().split('T')[0]}
          />
        </div>

        <div className="form-group">
          <label>–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏</label>
          <div className="skills-input">
            <input
              type="text"
              value={newSkill}
              onChange={(e) => setNewSkill(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫..."
              className="skill-input"
            />
            <button type="button" onClick={addSkill} className="add-skill-btn">
              +
            </button>
          </div>
          
          {projectData.skills.length > 0 && (
            <div className="skills-list">
              {projectData.skills.map((skill, index) => (
                <span key={index} className="skill-tag">
                  {skill}
                  <button 
                    type="button" 
                    onClick={() => removeSkill(skill)}
                    className="remove-skill"
                  >
                    √ó
                  </button>
                </span>
              ))}
            </div>
          )}
        </div>

        <div className="form-actions">
          <button 
            type="button" 
            onClick={onCancel}
            className="cancel-btn"
            disabled={loading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button 
            type="submit" 
            className="submit-btn"
            disabled={loading}
          >
            {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç'}
          </button>
        </div>
      </form>
    </div>
  );
}

export default CreateProjectForm;