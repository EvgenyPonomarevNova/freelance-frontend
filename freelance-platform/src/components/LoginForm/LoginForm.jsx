import './LoginForm.scss'
import { useState } from 'react'
import { useUser } from '../../contexts/UserContext'
import { useNavigate, useLocation } from 'react-router-dom'

function LoginForm() {
  const { login } = useUser()
  const navigate = useNavigate()
  const location = useLocation()
  
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    rememberMe: false
  })

  const [errors, setErrors] = useState({})
  const [isLoading, setIsLoading] = useState(false)

  // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ (–µ—Å–ª–∏ –±—ã–ª –ø–µ—Ä–µ—Ö–æ–¥ —Å –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
  const from = location.state?.from?.pathname || '/profile'

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }))
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }))
    }
    
    // –û—á–∏—â–∞–µ–º –æ–±—â—É—é –æ—à–∏–±–∫—É –ø—Ä–∏ –ª—é–±–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors.submit) {
      setErrors(prev => ({ ...prev, submit: '' }))
    }
  }

  const validateForm = () => {
    const newErrors = {}

    if (!formData.email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'
    }

    if (!formData.password) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
    } else if (formData.password.length < 6) {
      newErrors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }

const handleSubmit = async (e) => {
  e.preventDefault()
  
  if (!validateForm()) {
    return
  }

  setIsLoading(true)

  try {
    await login(formData.email, formData.password) // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API
    navigate('/profile')
  } catch (error) {
    setErrors({ submit: error.message })
  } finally {
    setIsLoading(false)
  }
}

  const handleDemoLogin = async (role = 'freelancer') => {
    setIsLoading(true)
    
    try {
      // –î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const demoAccounts = {
        freelancer: {
          email: 'freelancer@demo.ru',
          password: 'demo123'
        },
        client: {
          email: 'client@demo.ru', 
          password: 'demo123'
        }
      }
      
      const demoAccount = demoAccounts[role]
      await login(demoAccount.email, demoAccount.password)
      navigate('/profile')
      
    } catch (error) {
      setErrors({ submit: '–û—à–∏–±–∫–∞ –¥–µ–º–æ-–≤—Ö–æ–¥–∞. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.' })
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="login-form">
      <div className="form-header">
        <h2>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!</h2>
        <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</p>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="form-fields">
          <div className="form-group">
            <label htmlFor="email">Email</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="your@email.com"
              className={errors.email ? 'error' : ''}
              disabled={isLoading}
              autoComplete="email"
            />
            {errors.email && (
              <span className="error-text">{errors.email}</span>
            )}
          </div>

          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å"
              className={errors.password ? 'error' : ''}
              disabled={isLoading}
              autoComplete="current-password"
            />
            {errors.password && (
              <span className="error-text">{errors.password}</span>
            )}
          </div>
        </div>

        {errors.submit && (
          <div className="error-message">
            {errors.submit}
          </div>
        )}

        <div className="form-options">
          <label className="checkbox-label">
            <input
              type="checkbox"
              name="rememberMe"
              checked={formData.rememberMe}
              onChange={handleChange}
              disabled={isLoading}
            />
            <span className="checkmark"></span>
            –ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è
          </label>
          
          <a href="/forgot-password" className="forgot-password">
            –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?
          </a>
        </div>

        <button 
          type="submit" 
          className={`submit-btn ${isLoading ? 'loading' : ''}`}
          disabled={isLoading}
        >
          {isLoading ? (
            <>
              <span className="spinner"></span>
              –í—Ö–æ–¥...
            </>
          ) : (
            '–í–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç'
          )}
        </button>

        {/* –î–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <div className="demo-accounts">
          <p className="demo-divider">–ò–ª–∏ –≤–æ–π–¥–∏—Ç–µ –∫–∞–∫:</p>
          <div className="demo-buttons">
            <button 
              type="button"
              className="demo-btn freelancer-demo"
              onClick={() => handleDemoLogin('freelancer')}
              disabled={isLoading}
            >
              üë®‚Äçüíª –î–µ–º–æ-—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä
            </button>
            <button 
              type="button"
              className="demo-btn client-demo" 
              onClick={() => handleDemoLogin('client')}
              disabled={isLoading}
            >
              üëî –î–µ–º–æ-–∑–∞–∫–∞–∑—á–∏–∫
            </button>
          </div>
        </div>

        <div className="form-footer">
          <p>
            –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? <a href="/register" className="link">–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</a>
          </p>
        </div>
      </form>
    </div>
  )
}

export default LoginForm