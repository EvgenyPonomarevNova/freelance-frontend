import './RespondForm.scss'
import { useState } from 'react'
import { useUser } from '../../contexts/UserContext'

function RespondForm({ project, onClose, onSuccess }) {
  const { user } = useUser()
  const [formData, setFormData] = useState({
    proposal: '',
    price: '',
    timeline: ''
  })
  const [isSubmitting, setIsSubmitting] = useState(false)

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä
  if (user?.role !== 'freelancer') {
    return (
      <div className="not-freelancer-message">
        <h3>–¢–æ–ª—å–∫–æ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤</h3>
        <p>–û—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã</p>
        <button onClick={onClose} className="close-btn">–ó–∞–∫—Ä—ã—Ç—å</button>
      </div>
    )
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!formData.proposal.trim() || !formData.price) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è')
      return
    }

    setIsSubmitting(true)

    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      await new Promise(resolve => setTimeout(resolve, 1000))
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–ª–∏–∫
      const projects = JSON.parse(localStorage.getItem('nexus_projects') || '[]')
      const projectIndex = projects.findIndex(p => p.id === project.id)
      
      if (projectIndex !== -1) {
        const newResponse = {
          id: Date.now().toString(),
          freelancer: {
            id: user.id,
            name: user.profile.name,
            avatar: user.profile.avatar,
            rating: user.profile.rating
          },
          proposal: formData.proposal,
          price: parseInt(formData.price),
          timeline: formData.timeline,
          createdAt: new Date().toISOString(),
          status: 'pending' // pending, accepted, rejected
        }
        
        projects[projectIndex].responses.push(newResponse)
        localStorage.setItem('nexus_projects', JSON.stringify(projects))
        
        onSuccess?.()
        onClose?.()
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞:', error)
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞')
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({
      ...prev,
      [name]: value
    }))
  }

  return (
    <div className="respond-form">
      <div className="form-header">
        <h3>–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç</h3>
        <p>{project.title}</p>
        <button onClick={onClose} className="close-btn">√ó</button>
      </div>

      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="proposal">–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ *</label>
          <textarea
            id="proposal"
            name="proposal"
            value={formData.proposal}
            onChange={handleChange}
            placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ—á–µ–º—É –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø–æ–¥—Ö–æ–¥ –∏ –æ–ø—ã—Ç..."
            rows="5"
            required
          />
          <div className="hint">–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ –≤–∞—à –ø–æ–¥—Ö–æ–¥, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å—ã</div>
        </div>

        <div className="form-row">
          <div className="form-group">
            <label htmlFor="price">–í–∞—à–∞ —Ü–µ–Ω–∞ (‚ÇΩ) *</label>
            <input
              type="number"
              id="price"
              name="price"
              value={formData.price}
              onChange={handleChange}
              placeholder="5000"
              min="100"
              required
            />
            <div className="hint">–ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞: {project.budget} ‚ÇΩ</div>
          </div>

          <div className="form-group">
            <label htmlFor="timeline">–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
            <input
              type="text"
              id="timeline"
              name="timeline"
              value={formData.timeline}
              onChange={handleChange}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 7 –¥–Ω–µ–π"
            />
            <div className="hint">–£–∫–∞–∂–∏—Ç–µ –∫–æ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å</div>
          </div>
        </div>

        <div className="form-actions">
          <button 
            type="button" 
            onClick={onClose}
            className="cancel-btn"
            disabled={isSubmitting}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button 
            type="submit" 
            className={`submit-btn ${isSubmitting ? 'loading' : ''}`}
            disabled={isSubmitting}
          >
            {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : 'üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫'}
          </button>
        </div>
      </form>
    </div>
  )
}

export default RespondForm