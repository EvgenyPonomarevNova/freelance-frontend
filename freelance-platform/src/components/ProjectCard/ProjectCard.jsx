// components/ProjectCard/ProjectCard.jsx
import './ProjectCard.scss'
import { useState } from 'react'
import { useUser } from '../../contexts/UserContext'
import RespondForm from '../RespondForm/RespondForm'
import { apiService } from '../../services/api'

function ProjectCard({ project, onResponseSuccess }) {
  const { user } = useUser()
  const [showRespondForm, setShowRespondForm] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  
  // –ó–∞—â–∏—Ç–∞ –æ—Ç undefined –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
  const hasResponded = user && Array.isArray(project.responses) && 
    project.responses.some(response => 
      response && response.freelancer_id === user.id
    )

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–µ–∫—Ç–∞
  if (!project) {
    return (
      <div className="project-card error">
        <div className="project-header">
          <h3 className="project-title">–ü—Ä–æ–µ–∫—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</h3>
        </div>
      </div>
    )
  }

  const handleRespond = async () => {
    if (!user) {
      alert('–î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
      return
    }
    
    if (user.role !== 'freelancer') {
      alert('–¢–æ–ª—å–∫–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã')
      return
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –æ—Ç–∫–ª–∏–∫–∞ –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    setShowRespondForm(true)
  }

  const handleQuickRespond = async () => {
    if (!user) {
      alert('–î–ª—è –æ—Ç–∫–ª–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
      return
    }
    
    if (user.role !== 'freelancer') {
      alert('–¢–æ–ª—å–∫–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã')
      return
    }

    setIsSubmitting(true)
    
    try {
      const projectId = project.id
      
      const response = await apiService.respondToProject(projectId, {
        proposal: "–ì–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –ø—Ä–æ–µ–∫—Ç! –û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å–º–æ–≥—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏.",
        price: Math.round(project.budget * 0.8),
        timeline: "2 –Ω–µ–¥–µ–ª–∏"
      })
      
      alert('–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å callback
      if (onResponseSuccess) {
        onResponseSuccess()
      } else {
        // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.location.reload()
      }
      
    } catch (error) {
      if (error.message.includes('400') && error.message.includes('—É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏')) {
        alert('–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—Ç–∫–ª–∏–∫ –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç')
      } else if (error.message.includes('403')) {
        alert('–¢–æ–ª—å–∫–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã')
      } else {
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞: ' + error.message)
      }
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleRespondSuccess = () => {
    setShowRespondForm(false)
    alert('–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å callback
    if (onResponseSuccess) {
      onResponseSuccess()
    } else {
      window.location.reload()
    }
  }

  const handleChatClick = () => {
    if (!user) {
      alert('–î–ª—è –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ (–∫–ª–∏–µ–Ω—Ç –∏–ª–∏ –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä)
    const isParticipant = user.id === project.client_id || hasResponded
    
    if (!isParticipant) {
      alert('–ß–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞')
      return
    }
    
    window.location.href = `/chat/${project.id}`
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
  const clientName = project.client?.profile?.name || 
                    project.client?.name || 
                    '–ó–∞–∫–∞–∑—á–∏–∫'
  
  const clientAvatar = project.client?.profile?.name?.split(' ').map(n => n[0]).join('') || 
                      project.client?.name?.split(' ').map(n => n[0]).join('') || 
                      'C'

  return (
    <>
      <div className="project-card">
        <div className="project-header">
          <h3 className="project-title">{project.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</h3>
          <span className="project-budget">{project.budget?.toLocaleString() || '0'} ‚ÇΩ</span>
        </div>
        
        <p className="project-description">
          {project.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
        </p>
        
        <div className="project-meta">
          <span className="project-category">{getCategoryLabel(project.category)}</span>
          <span className="project-date">{formatDate(project.createdAt || project.created_at)}</span>
          <span className="project-responses">
            {(project.responses && Array.isArray(project.responses) ? project.responses.length : 0)} –æ—Ç–∫–ª–∏–∫–æ–≤
          </span>
        </div>

        {project.skills && project.skills.length > 0 && (
          <div className="project-skills">
            {project.skills.map((skill, index) => (
              <span key={skill + '-' + index} className="skill-tag">
                {typeof skill === 'string' ? skill : skill.skill || '–ù–∞–≤—ã–∫'}
              </span>
            ))}
          </div>
        )}
        
        <div className="project-footer">
          <div className="project-client">
            <span className="client-avatar">
              {clientAvatar}
            </span>
            <span className="client-name">{clientName}</span>
            {project.client?.profile?.rating && (
              <span className="client-rating">‚≠ê {project.client.profile.rating}</span>
            )}
          </div>
          
          <div className="project-actions">
            {/* –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ */}
            {(user?.id === project.client_id || hasResponded) && (
              <button 
                className="chat-btn"
                onClick={handleChatClick}
                disabled={isSubmitting}
              >
                üí¨ –ß–∞—Ç
              </button>
            )}
            
            {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ */}
            {hasResponded ? (
              <button className="responded-btn" disabled>
                ‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
              </button>
            ) : (
              <button 
                className={`respond-btn ${isSubmitting ? 'loading' : ''}`}
                onClick={handleQuickRespond}
                disabled={isSubmitting || user?.role !== 'freelancer'}
              >
                {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : 
                 user?.role === 'freelancer' ? 'üöÄ –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫' : '–¢–æ–ª—å–∫–æ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤'}
              </button>
            )}
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ñ–æ—Ä–º—ã –æ—Ç–∫–ª–∏–∫–∞ */}
      {showRespondForm && (
        <div className="modal-overlay">
          <RespondForm 
            project={project}
            onClose={() => setShowRespondForm(false)}
            onSuccess={handleRespondSuccess}
          />
        </div>
      )}
    </>
  )
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getCategoryLabel(category) {
  const categories = {
    development: 'üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
    design: 'üé® –î–∏–∑–∞–π–Ω', 
    marketing: 'üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
    writing: 'üìù –¢–µ–∫—Å—Ç—ã',
    seo: 'üîç SEO',
    other: 'üîß –î—Ä—É–≥–æ–µ'
  }
  return categories[category] || category || 'üîß –î—Ä—É–≥–æ–µ'
}

function formatDate(dateString) {
  if (!dateString) return '–ù–µ–¥–∞–≤–Ω–æ'
  
  try {
    const date = new Date(dateString)
    if (isNaN(date.getTime())) return '–ù–µ–¥–∞–≤–Ω–æ'
    
    const now = new Date()
    const diffTime = Math.abs(now - date)
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))
    
    if (diffDays === 0) return '–°–µ–≥–æ–¥–Ω—è'
    if (diffDays === 1) return '–í—á–µ—Ä–∞'
    if (diffDays < 7) return `${diffDays} –¥–Ω—è –Ω–∞–∑–∞–¥`
    if (diffDays < 30) return `${Math.floor(diffDays / 7)} –Ω–µ–¥–µ–ª–∏ –Ω–∞–∑–∞–¥`
    
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    })
  } catch (error) {
    return '–ù–µ–¥–∞–≤–Ω–æ'
  }
}

export default ProjectCard