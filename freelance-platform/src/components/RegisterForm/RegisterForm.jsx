// src/components/RegisterForm/RegisterForm.jsx
import "./RegisterForm.scss";
import { useState } from "react";
import { useUser } from "../../contexts/UserContext";
import { useNavigate } from "react-router-dom";
import OAuthButtons from "../OAuthButtons/OAuthButtons"; // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç

function RegisterForm({ onSuccess }) {
  const { register } = useUser();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    email: "",
    password: "",
    confirmPassword: "",
    fullName: "",
    role: "freelancer",
    agreeToTerms: false,
  });

  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: type === "checkbox" ? checked : value,
    }));

    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: "" }));
    }
    
    if (errors.submit) {
      setErrors((prev) => ({ ...prev, submit: "" }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.email.trim()) {
      newErrors.email = "Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email";
    }

    if (!formData.password) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω";
    } else if (formData.password.length < 6) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤";
    } else if (!/(?=.*[a-z])(?=.*[A-Z])/.test(formData.password)) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã";
    }

    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç";
    }

    if (!formData.fullName.trim()) {
      newErrors.fullName = "–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ";
    } else if (formData.fullName.trim().length < 2) {
      newErrors.fullName = "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞";
    }

    if (!formData.agreeToTerms) {
      newErrors.agreeToTerms = "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏–µ —Å —É—Å–ª–æ–≤–∏—è–º–∏";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);

    try {
      const registrationData = {
        email: formData.email.trim(),
        password: formData.password,
        fullName: formData.fullName.trim(),
        role: formData.role
      };

      await register(registrationData);
      onSuccess?.();
      navigate("/profile-setup", { 
        state: { 
          welcome: true,
          role: formData.role 
        } 
      });
      
    } catch (error) {
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      
      if (error.message.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')) {
        errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
      } else if (error.message.includes('—Å–µ—Ç—å') || error.message.includes('network')) {
        errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç';
      } else if (error.message.includes('–≤–∞–ª–∏–¥–∞—Ü–∏–∏') || error.message.includes('validation')) {
        errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö';
      }
      
      setErrors({ submit: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };

  const getRoleDescription = (role) => {
    const descriptions = {
      freelancer: {
        title: "–ù–∞—Ö–æ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
        features: [
          "–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ",
          "–ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã", 
          "–†–∞–±–æ—Ç–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ",
          "–í—ã—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é"
        ]
      },
      client: {
        title: "–ù–∞–π–¥–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á", 
        features: [
          "–ü—É–±–ª–∏–∫—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç—ã",
          "–í—ã–±–∏—Ä–∞–π—Ç–µ –∏–∑ –æ—Ç–∫–ª–∏–∫–æ–≤",
          "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Å—Ä–æ–∫–∏",
          "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏"
        ]
      }
    };
    return descriptions[role] || descriptions.freelancer;
  };

  const roleInfo = getRoleDescription(formData.role);

  return (
    <div className="register-form">
      <div className="form-header">
        <h2>
          –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ <span className="accent">FreelanceHub</span>
        </h2>
        <p>–°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å</p>
      </div>

      {errors.submit && (
        <div className="error-message">
          {errors.submit}
        </div>
      )}

      <form onSubmit={handleSubmit}>
        {/* –í—ã–±–æ—Ä —Ä–æ–ª–∏ */}
        <div className="role-selection">
          <h3>–ö—Ç–æ –≤—ã?</h3>
          <div className="role-options">
            <label
              className={`role-option ${
                formData.role === "freelancer" ? "selected" : ""
              }`}
            >
              <input
                type="radio"
                name="role"
                value="freelancer"
                checked={formData.role === "freelancer"}
                onChange={handleChange}
                disabled={isLoading}
              />
              <div className="role-content">
                <div className="role-icon">üíº</div>
                <div className="role-info">
                  <h4>–§—Ä–∏–ª–∞–Ω—Å–µ—Ä</h4>
                  <p>–ò—â—É –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã</p>
                </div>
              </div>
            </label>

            <label
              className={`role-option ${
                formData.role === "client" ? "selected" : ""
              }`}
            >
              <input
                type="radio"
                name="role"
                value="client"
                checked={formData.role === "client"}
                onChange={handleChange}
                disabled={isLoading}
              />
              <div className="role-content">
                <div className="role-icon">üëî</div>
                <div className="role-info">
                  <h4>–ó–∞–∫–∞–∑—á–∏–∫</h4>
                  <p>–ò—â—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π</p>
                </div>
              </div>
            </label>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ */}
          <div className="role-description">
            <h4>{roleInfo.title}</h4>
            <ul>
              {roleInfo.features.map((feature, index) => (
                <li key={index}>‚úì {feature}</li>
              ))}
            </ul>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è */}
        <div className="form-fields">
          <div className="form-group">
            <label htmlFor="fullName">–ü–æ–ª–Ω–æ–µ –∏–º—è *</label>
            <input
              type="text"
              id="fullName"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
              className={errors.fullName ? "error" : ""}
              disabled={isLoading}
              autoComplete="name"
            />
            {errors.fullName && (
              <span className="error-text">{errors.fullName}</span>
            )}
          </div>

          <div className="form-group">
            <label htmlFor="email">Email *</label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="your@email.com"
              className={errors.email ? "error" : ""}
              disabled={isLoading}
              autoComplete="email"
            />
            {errors.email && <span className="error-text">{errors.email}</span>}
          </div>

          <div className="form-group">
            <label htmlFor="password">–ü–∞—Ä–æ–ª—å *</label>
            <input
              type="password"
              id="password"
              name="password"
              value={formData.password}
              onChange={handleChange}
              placeholder="–ù–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
              className={errors.password ? "error" : ""}
              disabled={isLoading}
              autoComplete="new-password"
            />
            {errors.password && (
              <span className="error-text">{errors.password}</span>
            )}
            <div className="password-hint">
              –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã
            </div>
          </div>

          <div className="form-group">
            <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *</label>
            <input
              type="password"
              id="confirmPassword"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleChange}
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              className={errors.confirmPassword ? "error" : ""}
              disabled={isLoading}
              autoComplete="new-password"
            />
            {errors.confirmPassword && (
              <span className="error-text">{errors.confirmPassword}</span>
            )}
          </div>
        </div>

        {/* –°–æ–≥–ª–∞—à–µ–Ω–∏–µ */}
        <div className="form-group checkbox-group">
          <label className="checkbox-label">
            <input
              type="checkbox"
              name="agreeToTerms"
              checked={formData.agreeToTerms}
              onChange={handleChange}
              disabled={isLoading}
            />
            <span className="checkmark"></span>
            –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å{" "}
            <a href="/rules" target="_blank" rel="noopener noreferrer">
              –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            </a>{" "}
            –∏{" "}
            <a href="/privacy" target="_blank" rel="noopener noreferrer">
              –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </a>
          </label>
          {errors.agreeToTerms && (
            <span className="error-text">{errors.agreeToTerms}</span>
          )}
        </div>

        <button 
          type="submit" 
          className={`submit-btn ${isLoading ? 'loading' : ''}`}
          disabled={isLoading}
        >
          {isLoading ? (
            <>
              <span className="spinner"></span>
              –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...
            </>
          ) : (
            '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'
          )}
        </button>

        {/* OAuth –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
        <OAuthButtons type="register" isLoading={isLoading} />

        <div className="form-footer">
          <p>
            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{" "}
            <a href="/login" className="link">
              –í–æ–π—Ç–∏
            </a>
          </p>
        </div>
      </form>
    </div>
  );
}

export default RegisterForm;