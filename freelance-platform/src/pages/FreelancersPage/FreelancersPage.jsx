// pages/FreelancersPage/FreelancersPage.jsx
import './FreelancersPage.scss'
import { useState, useEffect, useMemo } from 'react'
import FreelancerCard from '../../components/FreelancerCard/FreelancerCard'

function FreelancersPage() {
  const [freelancers, setFreelancers] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [sortBy, setSortBy] = useState('rating')
  const [filters, setFilters] = useState({
    category: '',
    skills: [],
    rating: '',
    hourlyRateMin: '',
    hourlyRateMax: '',
    location: '',
    experience: '',
    englishLevel: ''
  })
  const [showFilters, setShowFilters] = useState(false)

  useEffect(() => {
    loadFreelancers()
  }, [])

  const loadFreelancers = () => {
    setTimeout(() => {
      const users = JSON.parse(localStorage.getItem('nexus_users') || '[]')
      const freelancerUsers = users
        .filter(user => user.role === 'freelancer')
        .map(user => ({
          ...user,
          profile: user.profile || {
            name: user.fullName || '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä',
            bio: '',
            skills: [],
            rating: 4.5 + Math.random() * 0.5, // –†–∞–Ω–¥–æ–º–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –¥–µ–º–æ
            completedProjects: Math.floor(Math.random() * 50),
            hourlyRate: 500 + Math.floor(Math.random() * 2000),
            location: ['–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–£–¥–∞–ª–µ–Ω–Ω–æ'][Math.floor(Math.random() * 4)],
            experience: ['junior', 'middle', 'senior'][Math.floor(Math.random() * 3)],
            englishLevel: ['beginner', 'intermediate', 'advanced', 'fluent'][Math.floor(Math.random() * 4)],
            responseRate: 80 + Math.floor(Math.random() * 20),
            online: Math.random() > 0.5
          }
        }))
      
      setFreelancers(freelancerUsers)
      setLoading(false)
    }, 1000)
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
  const filteredAndSortedFreelancers = useMemo(() => {
    let filtered = freelancers.filter(freelancer => {
      const profile = freelancer.profile || {}
      
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
      const matchesSearch = searchTerm === '' || 
        profile.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        profile.bio?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        profile.skills?.some(skill => {
          const skillName = typeof skill === 'string' ? skill : skill.skill || skill.name
          return skillName?.toLowerCase().includes(searchTerm.toLowerCase())
        })

      // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const matchesCategory = !filters.category || profile.category === filters.category

      // –§–∏–ª—å—Ç—Ä –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
      const matchesRating = !filters.rating || (profile.rating || 0) >= parseFloat(filters.rating)

      // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–µ
      const hourlyRate = profile.hourlyRate || 0
      const matchesRateMin = !filters.hourlyRateMin || hourlyRate >= parseInt(filters.hourlyRateMin)
      const matchesRateMax = !filters.hourlyRateMax || hourlyRate <= parseInt(filters.hourlyRateMax)

      // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
      const matchesLocation = !filters.location || 
        profile.location?.toLowerCase().includes(filters.location.toLowerCase())

      // –§–∏–ª—å—Ç—Ä –ø–æ –æ–ø—ã—Ç—É
      const matchesExperience = !filters.experience || profile.experience === filters.experience

      // –§–∏–ª—å—Ç—Ä –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É
      const matchesEnglish = !filters.englishLevel || profile.englishLevel === filters.englishLevel

      return matchesSearch && matchesCategory && matchesRating && matchesRateMin && 
             matchesRateMax && matchesLocation && matchesExperience && matchesEnglish
    })

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      const profileA = a.profile || {}
      const profileB = b.profile || {}
      
      switch (sortBy) {
        case 'rating':
          return (profileB.rating || 0) - (profileA.rating || 0)
        case 'projects':
          return (profileB.completedProjects || 0) - (profileA.completedProjects || 0)
        case 'rate_low':
          return (profileA.hourlyRate || 0) - (profileB.hourlyRate || 0)
        case 'rate_high':
          return (profileB.hourlyRate || 0) - (profileA.hourlyRate || 0)
        case 'name':
          return (profileA.name || '').localeCompare(profileB.name || '')
        case 'newest':
          return new Date(b.createdAt || 0) - new Date(a.createdAt || 0)
        default:
          return 0
      }
    })

    return filtered
  }, [freelancers, searchTerm, sortBy, filters])

  const categories = [
    { value: '', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
    { value: 'development', label: 'üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
    { value: 'design', label: 'üé® –î–∏–∑–∞–π–Ω' },
    { value: 'marketing', label: 'üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥' },
    { value: 'writing', label: 'üìù –¢–µ–∫—Å—Ç—ã' },
    { value: 'seo', label: 'üîç SEO' },
    { value: 'other', label: 'üîß –î—Ä—É–≥–æ–µ' }
  ]

  const experienceLevels = [
    { value: '', label: '–õ—é–±–æ–π –æ–ø—ã—Ç' },
    { value: 'junior', label: 'Junior (0-2 –≥–æ–¥–∞)' },
    { value: 'middle', label: 'Middle (2-5 –ª–µ—Ç)' },
    { value: 'senior', label: 'Senior (5+ –ª–µ—Ç)' }
  ]

  const englishLevels = [
    { value: '', label: '–õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å' },
    { value: 'beginner', label: '–ù–∞—á–∞–ª—å–Ω—ã–π (A1-A2)' },
    { value: 'intermediate', label: '–°—Ä–µ–¥–Ω–∏–π (B1-B2)' },
    { value: 'advanced', label: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π (C1)' },
    { value: 'fluent', label: '–°–≤–æ–±–æ–¥–Ω—ã–π (C2)' }
  ]

  const ratingOptions = [
    { value: '', label: '–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥' },
    { value: '4.5', label: '‚≠ê 4.5+ –ó–≤–µ–∑–¥' },
    { value: '4.0', label: '‚≠ê 4.0+ –ó–≤–µ–∑–¥' },
    { value: '3.0', label: '‚≠ê 3.0+ –ó–≤–µ–∑–¥' }
  ]

  const sortOptions = [
    { value: 'rating', label: '–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É' },
    { value: 'projects', label: '–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–µ–∫—Ç–æ–≤' },
    { value: 'rate_low', label: '–ü–æ —Å—Ç–∞–≤–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–µ—à–µ–≤—ã–µ)' },
    { value: 'rate_high', label: '–ü–æ —Å—Ç–∞–≤–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –¥–æ—Ä–æ–≥–∏–µ)' },
    { value: 'name', label: '–ü–æ –∏–º–µ–Ω–∏' },
    { value: 'newest', label: '–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ' }
  ]

  const popularSkills = [
    'React', 'JavaScript', 'Python', 'UI/UX Design', 'WordPress',
    'PHP', 'Vue.js', 'Node.js', 'Figma', 'Photoshop',
    'HTML/CSS', 'TypeScript', 'Mobile Development', 'SEO', 'SMM'
  ]

  const clearFilters = () => {
    setFilters({
      category: '',
      skills: [],
      rating: '',
      hourlyRateMin: '',
      hourlyRateMax: '',
      location: '',
      experience: '',
      englishLevel: ''
    })
    setSearchTerm('')
  }

  const toggleSkill = (skill) => {
    setFilters(prev => ({
      ...prev,
      skills: prev.skills.includes(skill)
        ? prev.skills.filter(s => s !== skill)
        : [...prev.skills, skill]
    }))
  }

  const activeFiltersCount = Object.values(filters).filter(value => 
    value !== '' && (!Array.isArray(value) || value.length > 0)
  ).length + (searchTerm ? 1 : 0)

  return (
    <div className="freelancers-page">
      {/* –•–µ–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="page-header">
        <div className="header-content">
          <h1>–ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞</h1>
          <p>–¢—ã—Å—è—á–∏ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É</p>
        </div>
        <div className="header-stats">
          <div className="stat">
            <strong>{filteredAndSortedFreelancers.length}</strong>
            <span>—Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ</span>
          </div>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="search-filters-section">
        {/* –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
        <div className="search-sort-row">
          <div className="search-box">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, –Ω–∞–≤—ã–∫–∞–º, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <button className="search-btn">üîç</button>
          </div>
          
          <div className="sort-controls">
            <select 
              value={sortBy} 
              onChange={(e) => setSortBy(e.target.value)}
              className="sort-select"
            >
              {sortOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            
            <button 
              className={`filters-toggle ${showFilters ? 'active' : ''}`}
              onClick={() => setShowFilters(!showFilters)}
            >
              üéõÔ∏è –§–∏–ª—å—Ç—Ä—ã
              {activeFiltersCount > 0 && (
                <span className="filters-badge">{activeFiltersCount}</span>
              )}
            </button>
          </div>
        </div>

        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        {showFilters && (
          <div className="advanced-filters">
            <div className="filters-grid">
              <div className="filter-group">
                <label>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</label>
                <select
                  value={filters.category}
                  onChange={(e) => setFilters({...filters, category: e.target.value})}
                >
                  {categories.map(cat => (
                    <option key={cat.value} value={cat.value}>
                      {cat.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="filter-group">
                <label>–†–µ–π—Ç–∏–Ω–≥</label>
                <select
                  value={filters.rating}
                  onChange={(e) => setFilters({...filters, rating: e.target.value})}
                >
                  {ratingOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="filter-group">
                <label>–°—Ç–∞–≤–∫–∞ –æ—Ç (‚ÇΩ/—á–∞—Å)</label>
                <input
                  type="number"
                  placeholder="500"
                  value={filters.hourlyRateMin}
                  onChange={(e) => setFilters({...filters, hourlyRateMin: e.target.value})}
                />
              </div>

              <div className="filter-group">
                <label>–°—Ç–∞–≤–∫–∞ –¥–æ (‚ÇΩ/—á–∞—Å)</label>
                <input
                  type="number"
                  placeholder="5000"
                  value={filters.hourlyRateMax}
                  onChange={(e) => setFilters({...filters, hourlyRateMax: e.target.value})}
                />
              </div>

              <div className="filter-group">
                <label>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</label>
                <input
                  type="text"
                  placeholder="–ì–æ—Ä–æ–¥ –∏–ª–∏ '–£–¥–∞–ª–µ–Ω–Ω–æ'"
                  value={filters.location}
                  onChange={(e) => setFilters({...filters, location: e.target.value})}
                />
              </div>

              <div className="filter-group">
                <label>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</label>
                <select
                  value={filters.experience}
                  onChange={(e) => setFilters({...filters, experience: e.target.value})}
                >
                  {experienceLevels.map(level => (
                    <option key={level.value} value={level.value}>
                      {level.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="filter-group">
                <label>–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫</label>
                <select
                  value={filters.englishLevel}
                  onChange={(e) => setFilters({...filters, englishLevel: e.target.value})}
                >
                  {englishLevels.map(level => (
                    <option key={level.value} value={level.value}>
                      {level.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ */}
            <div className="skills-filter">
              <label>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</label>
              <div className="skills-grid">
                {popularSkills.map(skill => (
                  <button
                    key={skill}
                    className={`skill-tag ${filters.skills.includes(skill) ? 'active' : ''}`}
                    onClick={() => toggleSkill(skill)}
                  >
                    {skill}
                    {filters.skills.includes(skill) && ' ‚úì'}
                  </button>
                ))}
              </div>
            </div>

            <div className="filter-actions">
              <button className="clear-filters" onClick={clearFilters}>
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </button>
              <button className="apply-filters" onClick={() => setShowFilters(false)}>
                ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <div className="quick-filters">
        <div className="quick-filters-scroll">
          {categories.slice(1).map(category => (
            <button
              key={category.value}
              className={`quick-filter ${filters.category === category.value ? 'active' : ''}`}
              onClick={() => setFilters({...filters, category: category.value})}
            >
              {category.label}
            </button>
          ))}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ */}
      <div className="freelancers-container">
        {loading ? (
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤...</p>
          </div>
        ) : filteredAndSortedFreelancers.length > 0 ? (
          <>
            <div className="freelancers-grid">
              {filteredAndSortedFreelancers.map(freelancer => (
                <FreelancerCard key={freelancer.id} freelancer={freelancer} />
              ))}
            </div>
            
            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            <div className="pagination">
              <button className="pagination-btn disabled">‚Üê –ù–∞–∑–∞–¥</button>
              <span className="pagination-info">–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1</span>
              <button className="pagination-btn disabled">–í–ø–µ—Ä–µ–¥ ‚Üí</button>
            </div>
          </>
        ) : (
          <div className="empty-state">
            <div className="empty-icon">üë•</div>
            <h3>–§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</p>
            <button className="btn btn-primary" onClick={clearFilters}>
              –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        )}
      </div>
    </div>
  )
}

export default FreelancersPage