// pages/SettingsPage/SettingsPage.jsx
import './SettingsPage.scss'
import { useState, useEffect, useRef } from 'react'
import { useUser } from '../../contexts/UserContext'
import { countries, popularCountries, findCountryByName, findCitiesByCountry } from '../../utils/countriesData'

function SettingsPage() {
  const { user, updateUser } = useUser()
  const [activeTab, setActiveTab] = useState('profile')
  const [saving, setSaving] = useState(false)
  const [emailVerification, setEmailVerification] = useState({
    code: '',
    isVerifying: false,
    isVerified: true, // –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
    showVerificationField: false
  })
  
  const countryInputRef = useRef(null)
  const cityInputRef = useRef(null)

  const [profileData, setProfileData] = useState({
    name: '',
    email: '',
    phone: '',
    bio: '',
    category: '',
    skills: [],
    hourlyRate: '',
    country: '',
    city: '',
    website: '',
    timezone: ''
  })

  const [securityData, setSecurityData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  })

  const [notificationSettings, setNotificationSettings] = useState({
    emailNotifications: true,
    projectNotifications: true,
    messageNotifications: true,
    marketingEmails: false,
    smsNotifications: false,
    desktopNotifications: true,
    weeklyDigest: true
  })

  const [appearanceSettings, setAppearanceSettings] = useState({
    theme: 'dark',
    language: 'ru',
    fontSize: 'medium',
    compactMode: false
  })

  const [countrySuggestions, setCountrySuggestions] = useState([])
  const [citySuggestions, setCitySuggestions] = useState([])
  const [showCountrySuggestions, setShowCountrySuggestions] = useState(false)
  const [showCitySuggestions, setShowCitySuggestions] = useState(false)

  useEffect(() => {
    if (user) {
      setProfileData({
        name: user.profile?.name || '',
        email: user.email || '',
        phone: user.profile?.phone || '',
        bio: user.profile?.bio || '',
        category: user.profile?.category || '',
        skills: user.profile?.skills || [],
        hourlyRate: user.profile?.hourlyRate || '',
        country: user.profile?.country || '',
        city: user.profile?.city || '',
        website: user.profile?.website || '',
        timezone: user.profile?.timezone || 'Europe/Moscow'
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
      setEmailVerification(prev => ({
        ...prev,
        isVerified: user.emailVerified || true
      }))
    }
  }, [user])

  const tabs = [
    { id: 'profile', name: '–ü—Ä–æ—Ñ–∏–ª—å', icon: 'üë§' },
    { id: 'security', name: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: 'üîê' },
    { id: 'notifications', name: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', icon: 'üîî' },
    { id: 'appearance', name: '–í–Ω–µ—à–Ω–∏–π –≤–∏–¥', icon: 'üé®' },
    { id: 'privacy', name: '–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å', icon: 'üõ°Ô∏è' }
  ]

  // –£–±–∏—Ä–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

  const categories = [
    { value: '', label: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é' },
    { value: 'development', label: 'üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
    { value: 'design', label: 'üé® –î–∏–∑–∞–π–Ω' },
    { value: 'marketing', label: 'üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥' },
    { value: 'writing', label: 'üìù –¢–µ–∫—Å—Ç—ã' },
    { value: 'seo', label: 'üîç SEO' },
    { value: 'consulting', label: 'üìã –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥' },
    { value: 'translation', label: 'üåê –ü–µ—Ä–µ–≤–æ–¥—ã' },
    { value: 'other', label: 'üîß –î—Ä—É–≥–æ–µ' }
  ]

  const timezones = [
    { value: 'Europe/Moscow', label: '–ú–æ—Å–∫–≤–∞ (UTC+3)' },
    { value: 'Europe/Kaliningrad', label: '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥ (UTC+2)' },
    { value: 'Asia/Yekaterinburg', label: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ (UTC+5)' },
    { value: 'Asia/Novosibirsk', label: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (UTC+7)' },
    { value: 'Asia/Vladivostok', label: '–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫ (UTC+10)' },
    { value: 'Europe/London', label: '–õ–æ–Ω–¥–æ–Ω (UTC+0)' },
    { value: 'Europe/Berlin', label: '–ë–µ—Ä–ª–∏–Ω (UTC+1)' },
    { value: 'America/New_York', label: '–ù—å—é-–ô–æ—Ä–∫ (UTC-5)' },
    { value: 'America/Los_Angeles', label: '–õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å (UTC-8)' }
  ]

  const handleCountryInput = (value) => {
    setProfileData({...profileData, country: value})
    
    if (value.length > 1) {
      const suggestions = countries
        .filter(country => 
          country.name.toLowerCase().includes(value.toLowerCase())
        )
        .slice(0, 8)
      setCountrySuggestions(suggestions)
      setShowCountrySuggestions(true)
    } else {
      setShowCountrySuggestions(false)
    }
  }

  const handleCountrySelect = (country) => {
    setProfileData({
      ...profileData, 
      country: country.name,
      city: ''
    })
    setShowCountrySuggestions(false)
    setCitySuggestions(country.cities)
  }

  const handleCityInput = (value) => {
    setProfileData({...profileData, city: value})
    
    if (value.length > 1 && profileData.country) {
      const country = findCountryByName(profileData.country)
      if (country) {
        const suggestions = country.cities
          .filter(city => 
            city.toLowerCase().includes(value.toLowerCase())
          )
          .slice(0, 8)
        setCitySuggestions(suggestions)
        setShowCitySuggestions(true)
      }
    } else {
      setShowCitySuggestions(false)
    }
  }

  const handleCitySelect = (city) => {
    setProfileData({...profileData, city})
    setShowCitySuggestions(false)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email
  const sendVerificationCode = async () => {
    if (!profileData.email) {
      alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å')
      return
    }

    setEmailVerification(prev => ({ ...prev, isVerifying: true }))
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ email
      setTimeout(() => {
        setEmailVerification(prev => ({
          ...prev,
          isVerifying: false,
          showVerificationField: true
        }))
        alert(`üìß –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${profileData.email}`)
      }, 2000)
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      setEmailVerification(prev => ({ ...prev, isVerifying: false }))
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const verifyEmailCode = async () => {
    if (!emailVerification.code) {
      alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
      return
    }

    setEmailVerification(prev => ({ ...prev, isVerifying: true }))
    
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
      setTimeout(() => {
        if (emailVerification.code === '123456') { // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
          setEmailVerification(prev => ({
            ...prev,
            isVerifying: false,
            isVerified: true,
            showVerificationField: false
          }))
          alert('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!')
        } else {
          alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
          setEmailVerification(prev => ({ ...prev, isVerifying: false }))
        }
      }, 1500)
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞')
      setEmailVerification(prev => ({ ...prev, isVerifying: false }))
    }
  }

  const handleProfileSave = async (e) => {
    e.preventDefault()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ email –∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ª–∏ –æ–Ω
    if (profileData.email !== user.email && !emailVerification.isVerified) {
      alert('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π email –∞–¥—Ä–µ—Å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º')
      return
    }
    
    setSaving(true)
    
    try {
      const updatedUser = {
        ...user,
        email: profileData.email,
        emailVerified: emailVerification.isVerified,
        profile: {
          ...user.profile,
          ...profileData
        }
      }
      
      const users = JSON.parse(localStorage.getItem('nexus_users') || '[]')
      const userIndex = users.findIndex(u => u.id === user.id)
      if (userIndex !== -1) {
        users[userIndex] = updatedUser
        localStorage.setItem('nexus_users', JSON.stringify(users))
      }
      
      updateUser(updatedUser)
      alert('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!')
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è')
    } finally {
      setSaving(false)
    }
  }

  const handleSecuritySave = async (e) => {
    e.preventDefault()
    setSaving(true)
    
    try {
      if (securityData.newPassword !== securityData.confirmPassword) {
        alert('‚ùå –ù–æ–≤—ã–µ –ø–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
        return
      }
      
      if (securityData.newPassword.length < 6) {
        alert('‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤')
        return
      }
      
      alert('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!')
      setSecurityData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      })
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è')
    } finally {
      setSaving(false)
    }
  }

  const handleNotificationSave = async (e) => {
    e.preventDefault()
    setSaving(true)
    
    try {
      const userSettings = JSON.parse(localStorage.getItem('user_settings') || '{}')
      userSettings[user.id] = { 
        notifications: notificationSettings,
        appearance: appearanceSettings
      }
      localStorage.setItem('user_settings', JSON.stringify(userSettings))
      
      alert('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')
    } catch (error) {
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫')
    } finally {
      setSaving(false)
    }
  }

  const renderProfileTab = () => (
    <div className="settings-tab">
      <div className="tab-header">
        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h2>
        <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º–∏</p>
      </div>

      <form onSubmit={handleProfileSave}>
        <div className="form-section">
          <h3>üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          <div className="form-row">
            <div className="form-group">
              <label>–ü–æ–ª–Ω–æ–µ –∏–º—è *</label>
              <input
                type="text"
                value={profileData.name}
                onChange={(e) => setProfileData({...profileData, name: e.target.value})}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                required
              />
            </div>
            <div className="form-group">
              <label>Email *</label>
              <div className="email-verification">
                <input
                  type="email"
                  value={profileData.email}
                  onChange={(e) => {
                    setProfileData({...profileData, email: e.target.value})
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ email
                    if (e.target.value !== user.email) {
                      setEmailVerification({
                        code: '',
                        isVerifying: false,
                        isVerified: false,
                        showVerificationField: false
                      })
                    }
                  }}
                  placeholder="your@email.com"
                  required
                />
                {profileData.email && (
                  <div className="verification-status">
                    {emailVerification.isVerified ? (
                      <span className="verified-badge">‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</span>
                    ) : (
                      <span className="unverified-badge">‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω</span>
                    )}
                  </div>
                )}
              </div>
              
              {/* –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è */}
              {emailVerification.showVerificationField && (
                <div className="verification-code-input">
                  <label>–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è *</label>
                  <div className="code-input-group">
                    <input
                      type="text"
                      value={emailVerification.code}
                      onChange={(e) => setEmailVerification(prev => ({ 
                        ...prev, 
                        code: e.target.value 
                      }))}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞"
                      maxLength="6"
                    />
                    <button 
                      type="button" 
                      className="btn btn-outline verify-btn"
                      onClick={verifyEmailCode}
                      disabled={emailVerification.isVerifying}
                    >
                      {emailVerification.isVerifying ? (
                        <>
                          <div className="loading-spinner-small"></div>
                          –ü—Ä–æ–≤–µ—Ä–∫–∞...
                        </>
                      ) : (
                        '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
                      )}
                    </button>
                  </div>
                </div>
              )}
              
              {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ */}
              {profileData.email && profileData.email !== user.email && !emailVerification.isVerified && !emailVerification.showVerificationField && (
                <button 
                  type="button" 
                  className="btn btn-outline send-code-btn"
                  onClick={sendVerificationCode}
                  disabled={emailVerification.isVerifying}
                >
                  {emailVerification.isVerifying ? (
                    <>
                      <div className="loading-spinner-small"></div>
                      –û—Ç–ø—Ä–∞–≤–∫–∞...
                    </>
                  ) : (
                    'üìß –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'
                  )}
                </button>
              )}
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>–¢–µ–ª–µ—Ñ–æ–Ω</label>
              <input
                type="tel"
                value={profileData.phone}
                onChange={(e) => setProfileData({...profileData, phone: e.target.value})}
                placeholder="+7 (999) 999-99-99"
              />
            </div>
            <div className="form-group">
              <label>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å</label>
              <select
                value={profileData.timezone}
                onChange={(e) => setProfileData({...profileData, timezone: e.target.value})}
              >
                {timezones.map(tz => (
                  <option key={tz.value} value={tz.value}>{tz.label}</option>
                ))}
              </select>
            </div>
          </div>
        </div>

        <div className="form-section">
          <h3>üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h3>
          <div className="form-row">
            <div className="form-group autocomplete">
              <label>–°—Ç—Ä–∞–Ω–∞</label>
              <input
                ref={countryInputRef}
                type="text"
                value={profileData.country}
                onChange={(e) => handleCountryInput(e.target.value)}
                placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã..."
                onFocus={() => profileData.country && handleCountryInput(profileData.country)}
              />
              {showCountrySuggestions && (
                <div className="suggestions-dropdown">
                  {popularCountries.map(country => (
                    <div 
                      key={country}
                      className="suggestion-item popular"
                      onClick={() => handleCountrySelect({name: country, cities: []})}
                    >
                      üåü {country}
                    </div>
                  ))}
                  {countrySuggestions.map(country => (
                    <div 
                      key={country.code}
                      className="suggestion-item"
                      onClick={() => handleCountrySelect(country)}
                    >
                      {country.name}
                    </div>
                  ))}
                </div>
              )}
            </div>

            <div className="form-group autocomplete">
              <label>–ì–æ—Ä–æ–¥</label>
              <input
                ref={cityInputRef}
                type="text"
                value={profileData.city}
                onChange={(e) => handleCityInput(e.target.value)}
                placeholder="–ù–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞..."
                disabled={!profileData.country}
                onFocus={() => profileData.city && handleCityInput(profileData.city)}
              />
              {showCitySuggestions && (
                <div className="suggestions-dropdown">
                  {citySuggestions.map(city => (
                    <div 
                      key={city}
                      className="suggestion-item"
                      onClick={() => handleCitySelect(city)}
                    >
                      {city}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ */}
        {user?.role === 'freelancer' && (
          <div className="form-section">
            <h3>üíº –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            <div className="form-group">
              <label>–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</label>
              <select
                value={profileData.category}
                onChange={(e) => setProfileData({...profileData, category: e.target.value})}
              >
                {categories.map(cat => (
                  <option key={cat.value} value={cat.value}>{cat.label}</option>
                ))}
              </select>
            </div>

            <div className="form-group">
              <label>–û —Å–µ–±–µ</label>
              <textarea
                value={profileData.bio}
                onChange={(e) => setProfileData({...profileData, bio: e.target.value})}
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö..."
                rows="4"
              />
              <div className="char-count">{profileData.bio.length}/500</div>
            </div>

            <div className="form-group">
              <label>–ü–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (‚ÇΩ)</label>
              <input
                type="number"
                value={profileData.hourlyRate}
                onChange={(e) => setProfileData({...profileData, hourlyRate: e.target.value})}
                placeholder="1000"
                min="500"
                max="10000"
              />
            </div>
          </div>
        )}

        {/* –°—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ */}
        {user?.role === 'freelancer' && (
          <div className="form-section">
            <h3>üîó –°—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</h3>
            <div className="form-group">
              <label>–í–µ–±-—Å–∞–π—Ç / –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</label>
              <input
                type="url"
                value={profileData.website}
                onChange={(e) => setProfileData({...profileData, website: e.target.value})}
                placeholder="https://example.com"
              />
            </div>
          </div>
        )}

        <div className="form-actions">
          <button type="submit" className="btn btn-primary" disabled={saving}>
            {saving ? (
              <>
                <div className="loading-spinner-small"></div>
                –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
              </>
            ) : (
              'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è'
            )}
          </button>
        </div>
      </form>
    </div>
  )

  const renderSecurityTab = () => (
    <div className="settings-tab">
      <div className="tab-header">
        <h2>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞</h2>
        <p>–ó–∞—â–∏—Ç–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –¥–æ—Å—Ç—É–ø–æ–º</p>
      </div>

      <form onSubmit={handleSecuritySave}>
        <div className="form-section">
          <h3>üîë –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h3>
          <div className="form-group">
            <label>–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å *</label>
            <input
              type="password"
              value={securityData.currentPassword}
              onChange={(e) => setSecurityData({...securityData, currentPassword: e.target.value})}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å"
              required
            />
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å *</label>
              <input
                type="password"
                value={securityData.newPassword}
                onChange={(e) => setSecurityData({...securityData, newPassword: e.target.value})}
                placeholder="–ù–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤"
                required
              />
            </div>
            <div className="form-group">
              <label>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *</label>
              <input
                type="password"
                value={securityData.confirmPassword}
                onChange={(e) => setSecurityData({...securityData, confirmPassword: e.target.value})}
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
                required
              />
            </div>
          </div>
        </div>

        <div className="form-section">
          <h3>üõ°Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞</h3>
          
          <div className="security-feature">
            <div className="feature-info">
              <h4>–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è</h4>
              <p>–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É</p>
              <div className="feature-status">
                <span className="status-badge disabled">–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</span>
              </div>
            </div>
            <button type="button" className="btn btn-outline">
              –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
            </button>
          </div>

          <div className="security-feature">
            <div className="feature-info">
              <h4>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h4>
              <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥</p>
              <div className="feature-status">
                <span className="status-badge">1 –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è</span>
              </div>
            </div>
            <button type="button" className="btn btn-outline">
              –£–ø—Ä–∞–≤–ª—è—Ç—å
            </button>
          </div>
        </div>

        <div className="form-actions">
          <button type="submit" className="btn btn-primary" disabled={saving}>
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üîí –û–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å'}
          </button>
        </div>
      </form>
    </div>
  )

  const renderNotificationsTab = () => (
    <div className="settings-tab">
      <div className="tab-header">
        <h2>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h2>
        <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–∫ –∏ –∫–æ–≥–¥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</p>
      </div>

      <form onSubmit={handleNotificationSave}>
        <div className="form-section">
          <h3>üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
          
          <div className="notification-item">
            <div className="notification-info">
              <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–µ–∫—Ç–∞—Ö</h4>
              <p>–ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –æ—Ç–∫–ª–∏–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={notificationSettings.projectNotifications}
                onChange={(e) => setNotificationSettings({
                  ...notificationSettings,
                  projectNotifications: e.target.checked
                })}
              />
              <span className="slider"></span>
            </label>
          </div>

          <div className="notification-item">
            <div className="notification-info">
              <h4>–°–æ–æ–±—â–µ–Ω–∏—è –∏ —á–∞—Ç—ã</h4>
              <p>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ —á–∞—Ç–µ</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={notificationSettings.messageNotifications}
                onChange={(e) => setNotificationSettings({
                  ...notificationSettings,
                  messageNotifications: e.target.checked
                })}
              />
              <span className="slider"></span>
            </label>
          </div>

          <div className="notification-item">
            <div className="notification-info">
              <h4>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç</h4>
              <p>–°–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={notificationSettings.weeklyDigest}
                onChange={(e) => setNotificationSettings({
                  ...notificationSettings,
                  weeklyDigest: e.target.checked
                })}
              />
              <span className="slider"></span>
            </label>
          </div>
        </div>

        <div className="form-section">
          <h3>üì± Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
          
          <div className="notification-item">
            <div className="notification-info">
              <h4>Desktop —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
              <p>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={notificationSettings.desktopNotifications}
                onChange={(e) => setNotificationSettings({
                  ...notificationSettings,
                  desktopNotifications: e.target.checked
                })}
              />
              <span className="slider"></span>
            </label>
          </div>

          <div className="notification-item">
            <div className="notification-info">
              <h4>SMS –æ–ø–æ–≤–µ—â–µ–Ω–∏—è</h4>
              <p>–í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ SMS</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={notificationSettings.smsNotifications}
                onChange={(e) => setNotificationSettings({
                  ...notificationSettings,
                  smsNotifications: e.target.checked
                })}
              />
              <span className="slider"></span>
            </label>
          </div>
        </div>

        <div className="form-section">
          <h3>üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</h3>
          <div className="notification-item">
            <div className="notification-info">
              <h4>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</h4>
              <p>–ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={notificationSettings.marketingEmails}
                onChange={(e) => setNotificationSettings({
                  ...notificationSettings,
                  marketingEmails: e.target.checked
                })}
              />
              <span className="slider"></span>
            </label>
          </div>
        </div>

        <div className="form-actions">
          <button type="submit" className="btn btn-primary" disabled={saving}>
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
          </button>
        </div>
      </form>
    </div>
  )

  const renderAppearanceTab = () => (
    <div className="settings-tab">
      <div className="tab-header">
        <h2>–í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h2>
        <p>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è</p>
      </div>

      <form onSubmit={handleNotificationSave}>
        <div className="form-section">
          <h3>üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</h3>
          
          <div className="theme-selector">
            <div className="theme-option">
              <input
                type="radio"
                id="theme-dark"
                name="theme"
                value="dark"
                checked={appearanceSettings.theme === 'dark'}
                onChange={(e) => setAppearanceSettings({...appearanceSettings, theme: e.target.value})}
              />
              <label htmlFor="theme-dark" className="theme-label">
                <div className="theme-preview dark-theme"></div>
                <span>–¢–µ–º–Ω–∞—è</span>
              </label>
            </div>

            <div className="theme-option">
              <input
                type="radio"
                id="theme-light"
                name="theme"
                value="light"
                checked={appearanceSettings.theme === 'light'}
                onChange={(e) => setAppearanceSettings({...appearanceSettings, theme: e.target.value})}
              />
              <label htmlFor="theme-light" className="theme-label">
                <div className="theme-preview light-theme"></div>
                <span>–°–≤–µ—Ç–ª–∞—è</span>
              </label>
            </div>

            <div className="theme-option">
              <input
                type="radio"
                id="theme-auto"
                name="theme"
                value="auto"
                checked={appearanceSettings.theme === 'auto'}
                onChange={(e) => setAppearanceSettings({...appearanceSettings, theme: e.target.value})}
              />
              <label htmlFor="theme-auto" className="theme-label">
                <div className="theme-preview auto-theme"></div>
                <span>–°–∏—Å—Ç–µ–º–Ω–∞—è</span>
              </label>
            </div>
          </div>
        </div>

        <div className="form-section">
          <h3>üìê –†–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞</h3>
          <div className="form-group">
            <select
              value={appearanceSettings.fontSize}
              onChange={(e) => setAppearanceSettings({...appearanceSettings, fontSize: e.target.value})}
            >
              <option value="small">–ú–∞–ª–µ–Ω—å–∫–∏–π</option>
              <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
              <option value="large">–ë–æ–ª—å—à–æ–π</option>
            </select>
          </div>
        </div>

        <div className="form-section">
          <h3>üåê –Ø–∑—ã–∫</h3>
          <div className="form-group">
            <select
              value={appearanceSettings.language}
              onChange={(e) => setAppearanceSettings({...appearanceSettings, language: e.target.value})}
            >
              <option value="ru">–†—É—Å—Å–∫–∏–π</option>
              <option value="en">English</option>
              <option value="de">Deutsch</option>
              <option value="fr">Fran√ßais</option>
            </select>
          </div>
        </div>

        <div className="form-section">
          <h3>‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
          
          <div className="notification-item">
            <div className="notification-info">
              <h4>–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º</h4>
              <p>–£–º–µ–Ω—å—à–∏—Ç—å –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ</p>
            </div>
            <label className="toggle-switch">
              <input
                type="checkbox"
                checked={appearanceSettings.compactMode}
                onChange={(e) => setAppearanceSettings({
                  ...appearanceSettings,
                  compactMode: e.target.checked
                })}
              />
              <span className="slider"></span>
            </label>
          </div>
        </div>

        <div className="form-actions">
          <button type="submit" className="btn btn-primary" disabled={saving}>
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
          </button>
        </div>
      </form>
    </div>
  )

  // –£–±–∏—Ä–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é

  const renderPrivacyTab = () => (
    <div className="settings-tab">
      <div className="tab-header">
        <h2>–ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</h2>
        <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –¥–∞–Ω–Ω—ã–º–∏</p>
      </div>

      <form onSubmit={handleNotificationSave}>
        <div className="form-section">
          <h3>üëÅÔ∏è –í–∏–¥–∏–º–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è</h3>
          
          <div className="notification-item">
            <div className="notification-info">
              <h4>–ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å</h4>
              <p>–†–∞–∑—Ä–µ—à–∏—Ç—å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å</p>
            </div>
            <label className="toggle-switch">
              <input type="checkbox" defaultChecked />
              <span className="slider"></span>
            </label>
          </div>

          <div className="notification-item">
            <div className="notification-info">
              <h4>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–Ω–ª–∞–π–Ω-—Å—Ç–∞—Ç—É—Å</h4>
              <p>–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–æ–≥–¥–∞ –≤—ã –æ–Ω–ª–∞–π–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
            <label className="toggle-switch">
              <input type="checkbox" defaultChecked />
              <span className="slider"></span>
            </label>
          </div>

          {user?.role === 'freelancer' && (
            <div className="notification-item">
              <div className="notification-info">
                <h4>–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É</h4>
                <p>–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∞—à—É —Å—Ç–∞–≤–∫—É –≤ –ø—É–±–ª–∏—á–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ</p>
              </div>
              <label className="toggle-switch">
                <input type="checkbox" defaultChecked />
                <span className="slider"></span>
              </label>
            </div>
          )}
        </div>

        <div className="form-section">
          <h3>üì® –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π</h3>
          
          <div className="notification-item">
            <div className="notification-info">
              <h4>–ü—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö</h4>
              <p>–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª—é–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
            <label className="toggle-switch">
              <input type="checkbox" defaultChecked />
              <span className="slider"></span>
            </label>
          </div>

          <div className="notification-item">
            <div className="notification-info">
              <h4>–§–∏–ª—å—Ç—Ä —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π</h4>
              <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è</p>
            </div>
            <label className="toggle-switch">
              <input type="checkbox" defaultChecked />
              <span className="slider"></span>
            </label>
          </div>
        </div>

        <div className="form-section">
          <h3>üóëÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
          
          <div className="privacy-action">
            <div className="action-info">
              <h4>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</h4>
              <p>–°–∫–∞—á–∞–π—Ç–µ –∫–æ–ø–∏—é –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</p>
            </div>
            <button className="btn btn-outline">üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</button>
          </div>

          <div className="privacy-action">
            <div className="action-info">
              <h4>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</h4>
              <p>–ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ</p>
              <p className="warning-text">–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</p>
            </div>
            <button className="btn btn-danger">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç</button>
          </div>
        </div>

        <div className="form-actions">
          <button type="submit" className="btn btn-primary" disabled={saving}>
            {saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
          </button>
        </div>
      </form>
    </div>
  )

  if (!user) {
    return (
      <div className="settings-page">
        <div className="not-authorized">
          <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
          <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º</p>
        </div>
      </div>
    )
  }

  return (
    <div className="settings-page">
      <div className="settings-header">
        <h1>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞</h1>
        <p>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –≤–∞—à—É —Ä–∞–±–æ—Ç—É –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</p>
      </div>

      <div className="settings-layout">
        <div className="settings-sidebar">
          {tabs.map(tab => (
            <button
              key={tab.id}
              className={`sidebar-tab ${activeTab === tab.id ? 'active' : ''}`}
              onClick={() => setActiveTab(tab.id)}
            >
              <span className="tab-icon">{tab.icon}</span>
              <span className="tab-name">{tab.name}</span>
            </button>
          ))}
        </div>

        <div className="settings-content">
          {activeTab === 'profile' && renderProfileTab()}
          {activeTab === 'security' && renderSecurityTab()}
          {activeTab === 'notifications' && renderNotificationsTab()}
          {activeTab === 'appearance' && renderAppearanceTab()}
          {activeTab === 'privacy' && renderPrivacyTab()}
        </div>
      </div>
    </div>
  )
}

export default SettingsPage