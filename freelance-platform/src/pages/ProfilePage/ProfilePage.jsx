// pages/ProfilePage/ProfilePage.jsx
import "./ProfilePage.scss";
import { useState, useEffect, useRef } from "react";
import { useUser } from "../../contexts/UserContext";
import { useNavigate } from "react-router-dom";
import SkillTag from "../../components/SkillTag/SkillTag";
import PortfolioItem from "../../components/PortfolioItem/PortfolioItem";

function ProfilePage() {
  const {
    user,
    loading,
    updateProfile,
    getMyProjects,
    getUserStats,
    addSkill,
    removeSkill,
    addPortfolioItem,
    removePortfolioItem,
    addExperience,
    removeExperience,
  } = useUser();

  const navigate = useNavigate();
  const fileInputRef = useRef(null);
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState("skills");
  const [stats, setStats] = useState(null);
  const [avatarPreview, setAvatarPreview] = useState(null);

  const [profileData, setProfileData] = useState({
    name: "",
    title: "",
    description: "",
    hourlyRate: "",
    location: "",
    experience: "",
    website: "",
    telegram: "",
    github: "",
  });

  const [newSkill, setNewSkill] = useState("");
  const [skillLevel, setSkillLevel] = useState("intermediate");
  const [newPortfolioItem, setNewPortfolioItem] = useState({
    title: "",
    description: "",
    skills: [],
    link: "",
    image: "",
  });

  const [newExperience, setNewExperience] = useState({
    position: "",
    company: "",
    period: "",
    description: "",
  });

  const [showPortfolioForm, setShowPortfolioForm] = useState(false);
  const [showExperienceForm, setShowExperienceForm] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  useEffect(() => {
    const loadStats = async () => {
      if (user) {
        try {
          const userStats = await getUserStats();
          setStats(userStats);
        } catch (error) {
          console.error("Error loading stats:", error);
        }
      }
    };

    loadStats();
  }, [user, getUserStats]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (user?.profile) {
      setProfileData({
        name: user.profile.name || "",
        title: user.profile.title || "",
        description: user.profile.bio || "", // ‚Üê –ò–ó–ú–ï–ù–ò–õ–ò –ù–ê bio
        hourlyRate: user.profile.hourlyRate || "",
        location: user.profile.location || "",
        experience: user.profile.experience || "",
        website: user.profile.website || "",
        telegram: user.profile.telegram || "",
        github: user.profile.github || "",
      });
    }
  }, [user]);

useEffect(() => {
  if (user) {
    console.log('üë§ Current user data:', user);
    console.log('üë§ User profile data:', user.profile);

    const userData = {
      name: user.profile?.name || user.name || "",
      title: user.profile?.title || user.title || "",
      description: user.profile?.bio || user.bio || "",
      hourlyRate: user.profile?.hourlyRate || user.hourlyRate || "",
      location: user.profile?.location || user.location || "",
      experience: user.profile?.experience || user.experience || "",
      website: user.profile?.website || user.website || "",
      telegram: user.profile?.telegram || user.telegram || "",
      github: user.profile?.github || user.github || "",
    };

    console.log('üìù Initializing profile data:', userData);
    setProfileData(userData);

    // üî• –í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º avatarPreview –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user.profile?.avatar) {
      console.log('üñºÔ∏è Setting avatar from user profile:', user.profile.avatar);
      setAvatarPreview(user.profile.avatar);
    } else {
      setAvatarPreview(null);
    }
  }
}, [user]);
  // –§—É–Ω–∫—Ü–∏–∏
const handleAvatarUpload = async (event) => {
  const file = event.target.files[0];
  if (!file) return;

  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (!file.type.startsWith("image/")) {
      alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
      return;
    }

    if (file.size > 5 * 1024 * 1024) {
      alert("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB");
      return;
    }

    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
    const reader = new FileReader();
    reader.onload = async (e) => {
      try {
        const imageUrl = e.target.result;
        
        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        setAvatarPreview(imageUrl);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log('üì§ Uploading avatar to server...');
        const result = await updateProfile({ avatar: imageUrl });
        
        if (result?.success) {
          console.log('‚úÖ Avatar saved successfully');
          // –ü—Ä–µ–≤—å—é —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –¥–∞–Ω–Ω—ã–µ –≤ localStorage –æ–±–Ω–æ–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ updateProfile
        } else {
          console.error('‚ùå Failed to save avatar');
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ');
          // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
          setAvatarPreview(user.profile?.avatar || null);
        }
      } catch (error) {
        console.error('‚ùå Avatar upload error:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ');
        setAvatarPreview(user.profile?.avatar || null);
      }
    };
    
    reader.onerror = () => {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞');
    };
    
    reader.readAsDataURL(file);
    
  } catch (error) {
    console.error('‚ùå File processing error:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞');
  }
};

  const triggerAvatarUpload = () => {
    fileInputRef.current?.click();
  };

  const handleProfileChange = (e) => {
    const { name, value } = e.target;
    setProfileData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

const saveProfile = async () => {
  try {
    const dataToSave = {
      name: profileData.name,
      bio: profileData.description,
      location: profileData.location,
      title: profileData.title,
      hourlyRate: profileData.hourlyRate,
      experience: profileData.experience,
      website: profileData.website,
      telegram: profileData.telegram,
      github: profileData.github,
    };

    console.log('üì§ Saving profile data:', dataToSave);
    
    const result = await updateProfile(dataToSave);
    console.log('‚úÖ Final save result:', result);

    // –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
    setIsEditing(false);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const savedUser = localStorage.getItem('current_user');
    console.log('üíæ Current localStorage:', JSON.parse(savedUser));
    
    alert('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const updatedStats = await getUserStats();
    setStats(updatedStats);

  } catch (error) {
    console.error('‚ùå Save error:', error);
    alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: ' + error.message);
  }
};

const cancelEdit = () => {
  if (user) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setProfileData({
      name: user.name || user.profile?.name || "",
      title: user.title || user.profile?.title || "",
      description: user.bio || user.profile?.bio || "", // bio ‚Üí description
      hourlyRate: user.hourlyRate || user.profile?.hourlyRate || "",
      location: user.location || user.profile?.location || "",
      experience: user.experience || user.profile?.experience || "",
      website: user.website || user.profile?.website || "",
      telegram: user.telegram || user.profile?.telegram || "",
      github: user.github || user.profile?.github || "",
    });
  }
  setIsEditing(false);
};

  const addNewSkill = () => {
    if (
      newSkill.trim() &&
      !user.profile.skills?.find((s) => s.skill === newSkill.trim())
    ) {
      addSkill(newSkill.trim(), skillLevel);
      setNewSkill("");
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      addNewSkill();
    }
  };

  const handleAddPortfolio = () => {
    if (newPortfolioItem.title.trim() && newPortfolioItem.description.trim()) {
      addPortfolioItem({
        ...newPortfolioItem,
        id: Date.now(),
        date: new Date().toLocaleDateString("ru-RU", {
          month: "long",
          year: "numeric",
        }),
      });
      setNewPortfolioItem({
        title: "",
        description: "",
        skills: [],
        link: "",
        image: "",
      });
      setShowPortfolioForm(false);
    }
  };

  const handleAddExperience = () => {
    if (newExperience.position.trim() && newExperience.company.trim()) {
      addExperience({
        ...newExperience,
        id: Date.now(),
      });
      setNewExperience({
        position: "",
        company: "",
        period: "",
        description: "",
      });
      setShowExperienceForm(false);
    }
  };

  const handleMyProjectsClick = () => {
    navigate("/my-projects");
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (loading) {
    return (
      <div className="profile-page">
        <div className="loading-state">
          <div className="loading-spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</p>
        </div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="profile-page">
        <div className="not-logged-in">
          <h2>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</h2>
          <p>–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è</p>
          <button className="auth-btn" onClick={() => navigate("/login")}>
            –í–æ–π—Ç–∏
          </button>
        </div>
      </div>
    );
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–∫–∞–∑—á–∏–∫
  if (user.role === "client") {
    return (
      <div className="profile-page">
        <div className="client-profile">
          <div className="profile-header">
<div className="profile-avatar-section">
  <div
    className="profile-avatar"
    onClick={triggerAvatarUpload}
    style={{ cursor: "pointer" }} // –í—Å–µ–≥–¥–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ
  >
    {avatarPreview ? (
      <img src={avatarPreview} alt={user.profile.name} />
    ) : (
      <div className="avatar-placeholder">
        {user.profile.name
          ?.split(" ")
          .map((n) => n[0])
          .join("") || "–ü"}
      </div>
    )}
    <div className="avatar-overlay">
      <span>üì∑</span>
      <p>–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ</p>
    </div>
    <input
      type="file"
      ref={fileInputRef}
      onChange={handleAvatarUpload}
      accept="image/*"
      style={{ display: "none" }}
    />
  </div>
  <div className="verification-badge">
    <span className="badge">‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω</span>
  </div>
</div>
            <div className="profile-main-info">
              <div className="name-section">
                <h1 className="profile-name">
                  {user.profile.name || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}
                </h1>
                <span className="role-badge client">üíº –ó–∞–∫–∞–∑—á–∏–∫</span>
              </div>

              {user.profile.location && (
                <p className="location">üìç {user.profile.location}</p>
              )}
              {user.profile.bio && (
                <p className="profile-description">{user.profile.bio}</p>
              )}
            </div>

            <div className="profile-actions">
              <button
                className="edit-profile-btn"
                onClick={() => setIsEditing(true)}
              >
                –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
              </button>
            </div>
          </div>

          {isEditing && (
            <div className="edit-modal">
              <div className="modal-content">
                <h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</h3>
                <div className="form-group">
                  <label>–ò–º—è *</label>
                  <input
                    type="text"
                    name="name"
                    value={profileData.name}
                    onChange={handleProfileChange}
                    placeholder="–í–∞—à–µ –∏–º—è"
                  />
                </div>
                <div className="form-group">
                  <label>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ *</label>
                  <input
                    type="text"
                    name="location"
                    value={profileData.location}
                    onChange={handleProfileChange}
                    placeholder="–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞"
                  />
                </div>
                <div className="form-group">
                  <label>–û —Å–µ–±–µ *</label>
                  <textarea
                    name="description"
                    value={profileData.description}
                    onChange={handleProfileChange}
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                    rows="4"
                  />
                </div>
                <div className="modal-actions">
                  <button className="save-btn" onClick={saveProfile}>
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                  </button>
                  <button className="cancel-btn" onClick={cancelEdit}>
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            </div>
          )}

          <div className="client-content">
            <div className="stats-section">
              <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
              <div className="stats-grid">
                <div className="stat-card">
                  <div className="stat-icon">üìã</div>
                  <div className="stat-number">{stats?.totalProjects || 0}</div>
                  <div className="stat-label">–°–æ–∑–¥–∞–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">üîÑ</div>
                  <div className="stat-number">
                    {stats?.activeProjects || 0}
                  </div>
                  <div className="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">‚úÖ</div>
                  <div className="stat-number">
                    {stats?.completedProjects || 0}
                  </div>
                  <div className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                </div>
                <div className="stat-card">
                  <div className="stat-icon">üí¨</div>
                  <div className="stat-number">
                    {stats?.totalResponses || 0}
                  </div>
                  <div className="stat-label">–û—Ç–∫–ª–∏–∫–æ–≤</div>
                </div>
              </div>
            </div>

            <div className="actions-section">
              <h2>üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
              <div className="action-buttons">
                <button
                  className="action-btn primary"
                  onClick={() => navigate("/create-project")}
                >
                  üìù –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                </button>
                <button
                  className="action-btn secondary"
                  onClick={handleMyProjectsClick}
                >
                  üìã –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
                </button>
                <button
                  className="action-btn secondary"
                  onClick={() => navigate("/freelancers")}
                >
                  üë• –ù–∞–π—Ç–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –ü—Ä–æ—Ñ–∏–ª—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
  return (
    <div className="profile-page">
      <div className="profile-header">
<div className="profile-avatar-section">
  <div
    className="profile-avatar"
    onClick={triggerAvatarUpload}
    style={{ cursor: "pointer" }} // –í—Å–µ–≥–¥–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ
  >
    {avatarPreview ? (
      <img src={avatarPreview} alt={user.profile.name} />
    ) : user.profile.avatar ? (
      <img src={user.profile.avatar} alt={user.profile.name} />
    ) : (
      <div className="avatar-placeholder">
        {user.profile.name
          ?.split(" ")
          .map((n) => n[0])
          .join("") || "–ü"}
      </div>
    )}
    <div className="avatar-overlay">
      <span>üì∑</span>
      <p>–°–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ</p>
    </div>
    <input
      type="file"
      ref={fileInputRef}
      onChange={handleAvatarUpload}
      accept="image/*"
      style={{ display: "none" }}
    />
  </div>
  <div className="verification-badge">
    <span className="badge">‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω</span>
  </div>
</div>

        <div className="profile-main-info">
          {isEditing ? (
            <div className="editable-fields">
              <input
                type="text"
                name="name"
                value={profileData.name}
                onChange={handleProfileChange}
                placeholder="–í–∞—à–µ –∏–º—è"
                className="edit-input large"
              />
              <input
                type="text"
                name="title"
                value={profileData.title}
                onChange={handleProfileChange}
                placeholder="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
                className="edit-input"
              />
              <textarea
                name="description"
                value={profileData.description}
                onChange={handleProfileChange}
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                className="edit-textarea"
                rows="3"
              />
              <div className="contact-info">
                <input
                  type="text"
                  name="website"
                  value={profileData.website}
                  onChange={handleProfileChange}
                  placeholder="Website"
                  className="edit-input small"
                />
                <input
                  type="text"
                  name="telegram"
                  value={profileData.telegram}
                  onChange={handleProfileChange}
                  placeholder="Telegram"
                  className="edit-input small"
                />
                <input
                  type="text"
                  name="github"
                  value={profileData.github}
                  onChange={handleProfileChange}
                  placeholder="GitHub"
                  className="edit-input small"
                />
              </div>
              <div className="edit-details">
                <input
                  type="number"
                  name="hourlyRate"
                  value={profileData.hourlyRate}
                  onChange={handleProfileChange}
                  placeholder="–°—Ç–∞–≤–∫–∞ –≤ —á–∞—Å (‚ÇΩ)"
                  className="edit-input small"
                />
                <input
                  type="text"
                  name="location"
                  value={profileData.location}
                  onChange={handleProfileChange}
                  placeholder="–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"
                  className="edit-input small"
                />
                <input
                  type="text"
                  name="experience"
                  value={profileData.experience}
                  onChange={handleProfileChange}
                  placeholder="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"
                  className="edit-input small"
                />
              </div>
            </div>
          ) : (
            <div className="profile-main">
              <div className="name-section">
                <h1 className="profile-name">
                  {user.profile.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}
                </h1>
                <span className="role-badge freelancer">üöÄ –§—Ä–∏–ª–∞–Ω—Å–µ—Ä</span>
              </div>

              {user.profile.title && (
                <p className="profile-title">{user.profile.title}</p>
              )}

              {user.profile.bio && (
                <p className="profile-description">{user.profile.bio}</p>
              )}

              <div className="profile-details">
                {user.profile.hourlyRate && (
                  <span className="detail-item">
                    üíº {user.profile.hourlyRate} ‚ÇΩ/—á–∞—Å
                  </span>
                )}
                {user.profile.location && (
                  <span className="detail-item">
                    üìç {user.profile.location}
                  </span>
                )}
                {user.profile.experience && (
                  <span className="detail-item">
                    ‚è±Ô∏è {user.profile.experience}
                  </span>
                )}
              </div>

              {(user.profile.website ||
                user.profile.telegram ||
                user.profile.github) && (
                <div className="social-links">
                  {user.profile.website && (
                    <a
                      href={user.profile.website}
                      className="social-link"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      üåê Website
                    </a>
                  )}
                  {user.profile.telegram && (
                    <a
                      href={`https://t.me/${user.profile.telegram}`}
                      className="social-link"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      ‚úàÔ∏è Telegram
                    </a>
                  )}
                  {user.profile.github && (
                    <a
                      href={`https://github.com/${user.profile.github}`}
                      className="social-link"
                      target="_blank"
                      rel="noopener noreferrer"
                    >
                      üíª GitHub
                    </a>
                  )}
                </div>
              )}
            </div>
          )}

          <div className="profile-stats">
            <div className="stat">
              <span className="stat-value">{stats?.rating || "5.0"}</span>
              <span className="stat-label">‚≠ê –†–µ–π—Ç–∏–Ω–≥</span>
            </div>
            <div className="stat">
              <span className="stat-value">
                {stats?.completedProjects || 0}
              </span>
              <span className="stat-label">‚úÖ –ü—Ä–æ–µ–∫—Ç–æ–≤</span>
            </div>
            <div className="stat">
              <span className="stat-value">
                {user.profile.skills?.length || 0}
              </span>
              <span className="stat-label">üéØ –ù–∞–≤—ã–∫–æ–≤</span>
            </div>
            <div className="stat">
              <span className="stat-value">{stats?.activeResponses || 0}</span>
              <span className="stat-label">üì• –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤</span>
            </div>
          </div>
        </div>

        <div className="profile-actions">
          {isEditing ? (
            <div className="edit-actions">
              <button className="save-btn" onClick={saveProfile}>
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
              <button className="cancel-btn" onClick={cancelEdit}>
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
            </div>
          ) : (
            <button
              className="edit-profile-btn"
              onClick={() => setIsEditing(true)}
            >
              ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            </button>
          )}
        </div>
      </div>

      <div className="profile-tabs">
        <button
          className={`tab ${activeTab === "skills" ? "active" : ""}`}
          onClick={() => setActiveTab("skills")}
        >
          üéØ –ù–∞–≤—ã–∫–∏
        </button>
        <button
          className={`tab ${activeTab === "portfolio" ? "active" : ""}`}
          onClick={() => setActiveTab("portfolio")}
        >
          üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
        </button>
        <button
          className={`tab ${activeTab === "experience" ? "active" : ""}`}
          onClick={() => setActiveTab("experience")}
        >
          üìà –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
        </button>
        <button
          className={`tab ${activeTab === "responses" ? "active" : ""}`}
          onClick={() => setActiveTab("responses")}
        >
          üì• –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏
        </button>
      </div>

      <div className="profile-content">
        {activeTab === "skills" && (
          <section className="skills-section">
            <div className="section-header">
              <h2>üéØ –ù–∞–≤—ã–∫–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</h2>
              {isEditing && (
                <div className="add-skill">
                  <input
                    type="text"
                    placeholder="–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–≤—ã–∫..."
                    value={newSkill}
                    onChange={(e) => setNewSkill(e.target.value)}
                    onKeyPress={handleKeyPress}
                    className="skill-input"
                  />
                  <select
                    value={skillLevel}
                    onChange={(e) => setSkillLevel(e.target.value)}
                    className="level-select"
                  >
                    <option value="beginner">–ù–∞—á–∞–ª—å–Ω—ã–π</option>
                    <option value="intermediate">–°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="advanced">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</option>
                    <option value="expert">–≠–∫—Å–ø–µ—Ä—Ç</option>
                  </select>
                  <button onClick={addNewSkill} className="add-skill-btn">
                    +
                  </button>
                </div>
              )}
            </div>

            <div className="skills-list">
              {user.profile.skills?.length > 0 ? (
                user.profile.skills.map((skillItem, index) => (
                  <SkillTag
                    key={index}
                    skill={skillItem.skill}
                    level={skillItem.level}
                    onRemove={removeSkill}
                    editable={isEditing}
                  />
                ))
              ) : (
                <div className="empty-state">
                  <div className="empty-icon">üéØ</div>
                  <p>–ù–∞–≤—ã–∫–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                  {isEditing && (
                    <p className="empty-hint">
                      –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –≤—ã—à–µ
                    </p>
                  )}
                </div>
              )}
            </div>
          </section>
        )}

        {activeTab === "portfolio" && (
          <section className="portfolio-section">
            <div className="section-header">
              <h2>üíº –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—Ä–æ–µ–∫—Ç–æ–≤</h2>
              {isEditing && (
                <button
                  className="add-portfolio-btn"
                  onClick={() => setShowPortfolioForm(true)}
                >
                  + –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
                </button>
              )}
            </div>

            {showPortfolioForm && (
              <div className="portfolio-form">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ</h3>
                <div className="form-group">
                  <input
                    type="text"
                    placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
                    value={newPortfolioItem.title}
                    onChange={(e) =>
                      setNewPortfolioItem((prev) => ({
                        ...prev,
                        title: e.target.value,
                      }))
                    }
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <textarea
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"
                    value={newPortfolioItem.description}
                    onChange={(e) =>
                      setNewPortfolioItem((prev) => ({
                        ...prev,
                        description: e.target.value,
                      }))
                    }
                    className="form-textarea"
                    rows="3"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    placeholder="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                    value={newPortfolioItem.link}
                    onChange={(e) =>
                      setNewPortfolioItem((prev) => ({
                        ...prev,
                        link: e.target.value,
                      }))
                    }
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                    value={newPortfolioItem.image}
                    onChange={(e) =>
                      setNewPortfolioItem((prev) => ({
                        ...prev,
                        image: e.target.value,
                      }))
                    }
                    className="form-input"
                  />
                </div>
                <div className="form-actions">
                  <button onClick={handleAddPortfolio} className="save-btn">
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                  <button
                    onClick={() => setShowPortfolioForm(false)}
                    className="cancel-btn"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            )}

            <div className="portfolio-list">
              {user.profile.portfolio?.length > 0 ? (
                user.profile.portfolio.map((item) => (
                  <PortfolioItem
                    key={item.id}
                    item={item}
                    editable={isEditing}
                    onEdit={(item) => console.log("Edit:", item)}
                    onDelete={removePortfolioItem}
                  />
                ))
              ) : (
                <div className="empty-state">
                  <div className="empty-icon">üíº</div>
                  <p>–ü—Ä–æ–µ–∫—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                  {isEditing && (
                    <p className="empty-hint">
                      –ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                    </p>
                  )}
                </div>
              )}
            </div>
          </section>
        )}

        {activeTab === "experience" && (
          <section className="experience-section">
            <div className="section-header">
              <h2>üìà –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h2>
              {isEditing && (
                <button
                  className="add-experience-btn"
                  onClick={() => setShowExperienceForm(true)}
                >
                  + –î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç
                </button>
              )}
            </div>

            {showExperienceForm && (
              <div className="experience-form">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h3>
                <div className="form-group">
                  <input
                    type="text"
                    placeholder="–î–æ–ª–∂–Ω–æ—Å—Ç—å"
                    value={newExperience.position}
                    onChange={(e) =>
                      setNewExperience((prev) => ({
                        ...prev,
                        position: e.target.value,
                      }))
                    }
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    placeholder="–ö–æ–º–ø–∞–Ω–∏—è"
                    value={newExperience.company}
                    onChange={(e) =>
                      setNewExperience((prev) => ({
                        ...prev,
                        company: e.target.value,
                      }))
                    }
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <input
                    type="text"
                    placeholder="–ü–µ—Ä–∏–æ–¥ —Ä–∞–±–æ—Ç—ã"
                    value={newExperience.period}
                    onChange={(e) =>
                      setNewExperience((prev) => ({
                        ...prev,
                        period: e.target.value,
                      }))
                    }
                    className="form-input"
                  />
                </div>
                <div className="form-group">
                  <textarea
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π"
                    value={newExperience.description}
                    onChange={(e) =>
                      setNewExperience((prev) => ({
                        ...prev,
                        description: e.target.value,
                      }))
                    }
                    className="form-textarea"
                    rows="3"
                  />
                </div>
                <div className="form-actions">
                  <button onClick={handleAddExperience} className="save-btn">
                    –î–æ–±–∞–≤–∏—Ç—å
                  </button>
                  <button
                    onClick={() => setShowExperienceForm(false)}
                    className="cancel-btn"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            )}

            <div className="experience-list">
              {user.profile.experienceList?.length > 0 ? (
                user.profile.experienceList.map((exp) => (
                  <div key={exp.id} className="experience-item">
                    <div className="experience-header">
                      <h3>{exp.position}</h3>
                      {isEditing && (
                        <button
                          className="delete-btn"
                          onClick={() => removeExperience(exp.id)}
                        >
                          üóëÔ∏è
                        </button>
                      )}
                    </div>
                    <p className="company">üè¢ {exp.company}</p>
                    <p className="period">üìÖ {exp.period}</p>
                    <p className="description">{exp.description}</p>
                  </div>
                ))
              ) : (
                <div className="empty-state">
                  <div className="empty-icon">üìà</div>
                  <p>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞</p>
                  {isEditing && (
                    <p className="empty-hint">
                      –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
                    </p>
                  )}
                </div>
              )}
            </div>
          </section>
        )}

        {activeTab === "responses" && (
          <section className="responses-section">
            <h2>üì• –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏</h2>
            <div className="responses-stats">
              <div className="stat-card">
                <div className="stat-number">{stats?.totalResponses || 0}</div>
                <div className="stat-label">–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤</div>
              </div>
              <div className="stat-card">
                <div className="stat-number">{stats?.activeResponses || 0}</div>
                <div className="stat-label">–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏</div>
              </div>
              <div className="stat-card">
                <div className="stat-number">
                  {stats?.acceptedResponses || 0}
                </div>
                <div className="stat-label">–ü—Ä–∏–Ω—è—Ç–æ</div>
              </div>
            </div>
            <div className="responses-list">
              <div className="empty-state">
                <div className="empty-icon">üì•</div>
                <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç—ã</p>
                <button
                  className="action-btn primary"
                  onClick={() => navigate("/projects")}
                >
                  –ù–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã
                </button>
              </div>
            </div>
          </section>
        )}
      </div>
    </div>
  );
}

export default ProfilePage;
