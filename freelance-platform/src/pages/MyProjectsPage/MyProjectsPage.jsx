// pages/MyProjectsPage/MyProjectsPage.jsx
import { useState, useEffect } from 'react';
import { useUser } from '../../contexts/UserContext';
import { useNavigate } from 'react-router-dom';
import ProjectViewModal from '../../components/ProjectViewModal/ProjectViewModal';
import ProjectEditModal from '../../components/ProjectEditModal/ProjectEditModal';
import './MyProjectsPage.scss';

function MyProjectsPage() {
  const { user, getMyProjects } = useUser();
  const navigate = useNavigate();
  const [projects, setProjects] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('all');
  const [expandedProject, setExpandedProject] = useState(null);
  
  // üî• –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ú–û–î–ê–õ–û–ö
  const [viewModalOpen, setViewModalOpen] = useState(false);
  const [editModalOpen, setEditModalOpen] = useState(false);
  const [selectedProject, setSelectedProject] = useState(null);

  useEffect(() => {
    const loadMyProjects = async () => {
      if (user) {
        try {
          setLoading(true);
          const myProjects = await getMyProjects();
          setProjects(Array.isArray(myProjects) ? myProjects : []);
        } catch (error) {
          console.error('Error loading projects:', error);
          setProjects([]);
        } finally {
          setLoading(false);
        }
      }
    };

    loadMyProjects();
  }, [user, getMyProjects]);

  // üî• –î–û–ë–ê–í–¨–¢–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ú–û–î–ê–õ–ö–ê–ú–ò
  const handleViewProject = (project) => {
    setSelectedProject(project);
    setViewModalOpen(true);
  };

  const handleEditProject = (project) => {
    setSelectedProject(project);
    setViewModalOpen(false);
    setEditModalOpen(true);
  };

  const handleCloseModals = () => {
    setViewModalOpen(false);
    setEditModalOpen(false);
    setSelectedProject(null);
  };

  const handleSaveProject = async (projectId, updatedData) => {
    try {
      // –ó–¥–µ—Å—å –≤—ã–∑–æ–≤ API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
      console.log('Saving project:', projectId, updatedData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setProjects(prev => prev.map(project => 
        project.id === projectId 
          ? { ...project, ...updatedData, updated_at: new Date().toISOString() }
          : project
      ));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      alert('–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    } catch (error) {
      console.error('Error saving project:', error);
      throw error;
    }
  };

  // –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ç.–¥.)...
  const projectStats = {
    all: projects.length,
    open: projects.filter(p => p.status === 'open').length,
    in_progress: projects.filter(p => p.status === 'in_progress').length,
    completed: projects.filter(p => p.status === 'completed').length,
    cancelled: projects.filter(p => p.status === 'cancelled').length
  };

  const filteredProjects = projects.filter(project => {
    if (activeTab === 'all') return true;
    return project.status === activeTab;
  });

  const getStatusConfig = (status) => {
    const configs = {
      open: { text: 'üîì –û—Ç–∫—Ä—ã—Ç', color: '#10b981', bgColor: 'rgba(16, 185, 129, 0.1)' },
      in_progress: { text: '‚ö° –í —Ä–∞–±–æ—Ç–µ', color: '#3b82f6', bgColor: 'rgba(59, 130, 246, 0.1)' },
      completed: { text: '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω', color: '#6b7280', bgColor: 'rgba(107, 114, 128, 0.1)' },
      cancelled: { text: '‚ùå –û—Ç–º–µ–Ω–µ–Ω', color: '#ef4444', bgColor: 'rgba(239, 68, 68, 0.1)' }
    };
    return configs[status] || configs.open;
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  };

  const toggleProjectExpand = (projectId) => {
    setExpandedProject(expandedProject === projectId ? null : projectId);
  };

  // üî• –û–ë–ù–û–í–ò–¢–ï –ö–ù–û–ü–ö–ò –í –ö–ê–†–¢–û–ß–ö–ê–• –ü–†–û–ï–ö–¢–û–í
  // –í–º–µ—Å—Ç–æ navigate –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ handleViewProject –∏ handleEditProject

  if (!user) {
    return (
      <div className="my-projects-page">
        <div className="not-authorized">
          <div className="auth-icon">üîí</div>
          <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
          <p>–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</p>
          <button 
            className="auth-btn"
            onClick={() => navigate('/login')}
          >
            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="my-projects-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="page-header">
        <div className="header-content">
          <h1>üöÄ –ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã</h1>
          <p>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–∞—à–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –æ—Ç–∫–ª–∏–∫–∏</p>
        </div>
        <button 
          className="create-project-btn"
          onClick={() => navigate('/create-project')}
        >
          <span className="btn-icon">+</span>
          –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
        </button>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="projects-stats">
        <div className="stat-card">
          <div className="stat-icon">üìã</div>
          <div className="stat-value">{projectStats.all}</div>
          <div className="stat-label">–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">üîì</div>
          <div className="stat-value">{projectStats.open}</div>
          <div className="stat-label">–û—Ç–∫—Ä—ã—Ç—ã—Ö</div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">‚ö°</div>
          <div className="stat-value">{projectStats.in_progress}</div>
          <div className="stat-label">–í —Ä–∞–±–æ—Ç–µ</div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">‚úÖ</div>
          <div className="stat-value">{projectStats.completed}</div>
          <div className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
        </div>
      </div>

      {/* –¢–∞–±—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ */}
      <div className="projects-tabs">
        <button 
          className={`tab-btn ${activeTab === 'all' ? 'active' : ''}`}
          onClick={() => setActiveTab('all')}
        >
          <span>–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</span>
          <span className="tab-count">{projectStats.all}</span>
        </button>
        <button 
          className={`tab-btn ${activeTab === 'open' ? 'active' : ''}`}
          onClick={() => setActiveTab('open')}
        >
          <span>–û—Ç–∫—Ä—ã—Ç—ã–µ</span>
          <span className="tab-count">{projectStats.open}</span>
        </button>
        <button 
          className={`tab-btn ${activeTab === 'in_progress' ? 'active' : ''}`}
          onClick={() => setActiveTab('in_progress')}
        >
          <span>–í —Ä–∞–±–æ—Ç–µ</span>
          <span className="tab-count">{projectStats.in_progress}</span>
        </button>
        <button 
          className={`tab-btn ${activeTab === 'completed' ? 'active' : ''}`}
          onClick={() => setActiveTab('completed')}
        >
          <span>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</span>
          <span className="tab-count">{projectStats.completed}</span>
        </button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
      <div className="projects-list">
        {loading ? (
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã...</p>
          </div>
        ) : filteredProjects.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">
              {activeTab === 'all' ? 'üìã' : 
               activeTab === 'open' ? 'üîì' :
               activeTab === 'in_progress' ? '‚ö°' : '‚úÖ'}
            </div>
            <h3>
              {activeTab === 'all' ? '–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' :
               activeTab === 'open' ? '–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤' :
               activeTab === 'in_progress' ? '–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ' :
               '–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤'}
            </h3>
            <p>
              {activeTab === 'all' 
                ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞–º–∏'
                : `–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${getStatusConfig(activeTab).text}"`
              }
            </p>
            {activeTab === 'all' && (
              <button 
                className="create-project-btn"
                onClick={() => navigate('/create-project')}
              >
                + –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø—Ä–æ–µ–∫—Ç
              </button>
            )}
          </div>
        ) : (
          filteredProjects.map(project => {
            const statusConfig = getStatusConfig(project.status);
            const isExpanded = expandedProject === project.id;
            
            return (
              <div key={project.id} className="project-card">
                <div className="project-header">
                  <div className="project-info">
                    <h3 className="project-title">
                      <a 
                        href={`/projects/${project.id}`}
                        onClick={(e) => {
                          e.preventDefault();
                          handleViewProject(project); // üî• –ò–ó–ú–ï–ù–ò–õ–ò –ù–ê handleViewProject
                        }}
                      >
                        {project.title}
                      </a>
                    </h3>
                    <div className="project-meta">
                      <span className="project-budget">üí∞ {project.budget} ‚ÇΩ</span>
                      <span className="project-category">üè∑Ô∏è {project.category}</span>
                      <span className="project-date">üìÖ {formatDate(project.created_at)}</span>
                    </div>
                  </div>
                  <div className="project-actions">
                    <div 
                      className="status-badge"
                      style={{ 
                        color: statusConfig.color,
                        backgroundColor: statusConfig.bgColor
                      }}
                    >
                      {statusConfig.text}
                    </div>
                    <div className="response-count">
                      üí¨ {project.responses?.length || 0}
                    </div>
                  </div>
                </div>

                <p className="project-description">{project.description}</p>

                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ */}
                <div className="project-stats">
                  <div className="stat">
                    <strong>{project.responses?.length || 0}</strong>
                    <span>–û—Ç–∫–ª–∏–∫–æ–≤</span>
                  </div>
                  <div className="stat">
                    <strong>
                      {project.responses?.reduce((sum, r) => sum + (r.proposedBudget || 0), 0) || 0} ‚ÇΩ
                    </strong>
                    <span>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤—Å–µ–≥–æ</span>
                  </div>
                  <div className="stat">
                    <strong>
                      {project.responses?.length ? 
                        Math.round(project.responses.reduce((sum, r) => sum + (r.proposedBudget || 0), 0) / project.responses.length) : 0
                      } ‚ÇΩ
                    </strong>
                    <span>–°—Ä–µ–¥–Ω–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</span>
                  </div>
                </div>

                {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                <div className="project-footer">
                  <div className="action-buttons">
                    <button 
                      className="btn btn-primary"
                      onClick={() => handleViewProject(project)} // üî• –ò–ó–ú–ï–ù–ò–õ–ò
                    >
                      üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                    </button>
                    <button 
                      className="btn btn-outline"
                      onClick={() => handleEditProject(project)} // üî• –ò–ó–ú–ï–ù–ò–õ–ò
                    >
                      ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button 
                      className="btn btn-outline"
                      onClick={() => toggleProjectExpand(project.id)}
                    >
                      {isExpanded ? 'üì• –°–∫—Ä—ã—Ç—å' : 'üì§ –ü–æ–∫–∞–∑–∞—Ç—å'} –æ—Ç–∫–ª–∏–∫–∏
                    </button>
                  </div>
                </div>

                {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏ */}
                {isExpanded && project.responses && project.responses.length > 0 && (
                  <div className="project-responses">
                    <h4>üí¨ –û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç:</h4>
                    <div className="responses-list">
                      {project.responses.map((response, index) => (
                        <div key={index} className="response-item">
                          <div className="response-header">
                            <span className="freelancer-name">
                              üë§ {response.freelancerName || '–ê–Ω–æ–Ω–∏–º–Ω—ã–π —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä'}
                            </span>
                            <span className="response-budget">
                              üí∞ {response.proposedBudget || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} ‚ÇΩ
                            </span>
                          </div>
                          <p className="response-message">
                            {response.message || '–ë–µ–∑ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è'}
                          </p>
                          <div className="response-actions">
                            <span className="response-date">
                              üìÖ {formatDate(response.created_at || new Date())}
                            </span>
                            <div className="response-buttons">
                              <button className="btn btn-success btn-sm">
                                ‚úÖ –ü—Ä–∏–Ω—è—Ç—å
                              </button>
                              <button className="btn btn-danger btn-sm">
                                ‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å
                              </button>
                              <button className="btn btn-outline btn-sm">
                                üí¨ –ù–∞–ø–∏—Å–∞—Ç—å
                              </button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {isExpanded && (!project.responses || project.responses.length === 0) && (
                  <div className="project-responses">
                    <div className="no-responses">
                      <div className="no-responses-icon">üí¨</div>
                      <p>–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç</p>
                      <small>–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –≤ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤</small>
                    </div>
                  </div>
                )}
              </div>
            );
          })
        )}
      </div>
      <ProjectViewModal
        project={selectedProject}
        isOpen={viewModalOpen}
        onClose={handleCloseModals}
        onEdit={() => handleEditProject(selectedProject)}
      />

      <ProjectEditModal
        project={selectedProject}
        isOpen={editModalOpen}
        onClose={handleCloseModals}
        onSave={handleSaveProject}
      />
      
    </div> 
  );
}

export default MyProjectsPage;