// ProjectsPage.jsx - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import './ProjectsPage.scss'
import { useState, useEffect, useMemo } from 'react'
import ProjectCard from '../../components/ProjectCard/ProjectCard'
import { apiService } from '../../services/api' // ‚úÖ –î–û–ë–ê–í–¨–¢–ï –ò–ú–ü–û–†–¢

function ProjectsPage() {
  const [projects, setProjects] = useState([])
  const [loading, setLoading] = useState(true)
  const [searchTerm, setSearchTerm] = useState('')
  const [sortBy, setSortBy] = useState('newest')
  const [filters, setFilters] = useState({
    category: '',
    budgetMin: '',
    budgetMax: '',
    skills: [],
    experience: '',
    duration: ''
  })
  const [showFilters, setShowFilters] = useState(false)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ò–ó –†–ï–ê–õ–¨–ù–û–ì–û API
  useEffect(() => {
    loadProjects()
  }, [])

const loadProjects = async () => {
  try {
    const response = await apiService.getProjects();
    const projects = response.projects || [];
    
    if (projects.length === 0) {
      // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      loadDemoProjects();
    } else {
      setProjects(projects);
    }
  } catch (error) {
    console.error('Failed to load projects:', error);
    loadProjectsFromStorage(); // –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  }
};
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–æ–±–Ω–æ–≤–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
  const filteredAndSortedProjects = useMemo(() => {
    let filtered = projects.filter(project => {
      // –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
      const matchesSearch = searchTerm === '' || 
        project.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        project.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        project.skills?.some(skill => 
          skill.toLowerCase().includes(searchTerm.toLowerCase())
        )

      // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const matchesCategory = !filters.category || project.category === filters.category

      // –§–∏–ª—å—Ç—Ä –ø–æ –±—é–¥–∂–µ—Ç—É
      const projectBudget = parseInt(project.budget) || 0
      const matchesBudgetMin = !filters.budgetMin || projectBudget >= parseInt(filters.budgetMin)
      const matchesBudgetMax = !filters.budgetMax || projectBudget <= parseInt(filters.budgetMax)

      return matchesSearch && matchesCategory && matchesBudgetMin && matchesBudgetMax
    })

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    filtered.sort((a, b) => {
      switch (sortBy) {
        case 'newest':
          return new Date(b.createdAt || b.created_at) - new Date(a.createdAt || a.created_at)
        case 'oldest':
          return new Date(a.createdAt || a.created_at) - new Date(b.createdAt || b.created_at)
        case 'budget_high':
          return (parseInt(b.budget) || 0) - (parseInt(a.budget) || 0)
        case 'budget_low':
          return (parseInt(a.budget) || 0) - (parseInt(b.budget) || 0)
        case 'popular':
          return (b.responses?.length || 0) - (a.responses?.length || 0)
        default:
          return 0
      }
    })

    return filtered
  }, [projects, searchTerm, sortBy, filters])

  // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

  const categories = [
    { value: '', label: '–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' },
    { value: 'development', label: 'üíª –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' },
    { value: 'design', label: 'üé® –î–∏–∑–∞–π–Ω' },
    { value: 'marketing', label: 'üìä –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥' },
    { value: 'writing', label: 'üìù –¢–µ–∫—Å—Ç—ã' },
    { value: 'seo', label: 'üîç SEO' },
    { value: 'other', label: 'üîß –î—Ä—É–≥–æ–µ' }
  ]

  const experienceLevels = [
    { value: '', label: '–õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å' },
    { value: 'beginner', label: '–ù–∞—á–∞–ª—å–Ω—ã–π' },
    { value: 'intermediate', label: '–°—Ä–µ–¥–Ω–∏–π' },
    { value: 'expert', label: '–≠–∫—Å–ø–µ—Ä—Ç' }
  ]

  const durations = [
    { value: '', label: '–õ—é–±–æ–π —Å—Ä–æ–∫' },
    { value: '1week', label: '–î–æ 1 –Ω–µ–¥–µ–ª–∏' },
    { value: '1month', label: '–î–æ 1 –º–µ—Å—è—Ü–∞' },
    { value: '3months', label: '–î–æ 3 –º–µ—Å—è—Ü–µ–≤' },
    { value: 'longterm', label: '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π' }
  ]

  const sortOptions = [
    { value: 'newest', label: '–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ' },
    { value: 'oldest', label: '–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ' },
    { value: 'budget_high', label: '–ë—é–¥–∂–µ—Ç –ø–æ —É–±—ã–≤–∞–Ω–∏—é' },
    { value: 'budget_low', label: '–ë—é–¥–∂–µ—Ç –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é' },
    { value: 'popular', label: '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ' }
  ]

  const clearFilters = () => {
    setFilters({
      category: '',
      budgetMin: '',
      budgetMax: '',
      skills: [],
      experience: '',
      duration: ''
    })
    setSearchTerm('')
  }

  const activeFiltersCount = Object.values(filters).filter(value => 
    value !== '' && (!Array.isArray(value) || value.length > 0)
  ).length + (searchTerm ? 1 : 0)

  return (
    <div className="projects-page">
      {/* –•–µ–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="page-header">
        <div className="header-content">
          <h1>–ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç</h1>
          <p>–¢—ã—Å—è—á–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∂–¥—É—Ç —Å–≤–æ–µ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</p>
        </div>
        <div className="header-stats">
          <div className="stat">
            <strong>{filteredAndSortedProjects.length}</strong>
            <span>–ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ</span>
          </div>
        </div>
      </div>

      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã */}
      <div className="search-filters-section">
        {/* –°—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */}
        <div className="search-sort-row">
          <div className="search-box">
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –æ–ø–∏—Å–∞–Ω–∏—é, –Ω–∞–≤—ã–∫–∞–º..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <button className="search-btn">üîç</button>
          </div>
          
          <div className="sort-controls">
            <select 
              value={sortBy} 
              onChange={(e) => setSortBy(e.target.value)}
              className="sort-select"
            >
              {sortOptions.map(option => (
                <option key={option.value} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            
            <button 
              className={`filters-toggle ${showFilters ? 'active' : ''}`}
              onClick={() => setShowFilters(!showFilters)}
            >
              üéõÔ∏è –§–∏–ª—å—Ç—Ä—ã
              {activeFiltersCount > 0 && (
                <span className="filters-badge">{activeFiltersCount}</span>
              )}
            </button>
          </div>
        </div>

        {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        {showFilters && (
          <div className="advanced-filters">
            <div className="filters-grid">
              <div className="filter-group">
                <label>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                <select
                  value={filters.category}
                  onChange={(e) => setFilters({...filters, category: e.target.value})}
                >
                  {categories.map(cat => (
                    <option key={cat.value} value={cat.value}>
                      {cat.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="filter-group">
                <label>–ë—é–¥–∂–µ—Ç –æ—Ç (‚ÇΩ)</label>
                <input
                  type="number"
                  placeholder="0"
                  value={filters.budgetMin}
                  onChange={(e) => setFilters({...filters, budgetMin: e.target.value})}
                />
              </div>

              <div className="filter-group">
                <label>–ë—é–¥–∂–µ—Ç –¥–æ (‚ÇΩ)</label>
                <input
                  type="number"
                  placeholder="100000"
                  value={filters.budgetMax}
                  onChange={(e) => setFilters({...filters, budgetMax: e.target.value})}
                />
              </div>

              <div className="filter-group">
                <label>–£—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞</label>
                <select
                  value={filters.experience}
                  onChange={(e) => setFilters({...filters, experience: e.target.value})}
                >
                  {experienceLevels.map(level => (
                    <option key={level.value} value={level.value}>
                      {level.label}
                    </option>
                  ))}
                </select>
              </div>

              <div className="filter-group">
                <label>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è</label>
                <select
                  value={filters.duration}
                  onChange={(e) => setFilters({...filters, duration: e.target.value})}
                >
                  {durations.map(duration => (
                    <option key={duration.value} value={duration.value}>
                      {duration.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            <div className="filter-actions">
              <button className="clear-filters" onClick={clearFilters}>
                üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </button>
              <button className="apply-filters" onClick={() => setShowFilters(false)}>
                ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <div className="quick-filters">
        <div className="quick-filters-scroll">
          {categories.slice(1).map(category => (
            <button
              key={category.value}
              className={`quick-filter ${filters.category === category.value ? 'active' : ''}`}
              onClick={() => setFilters({...filters, category: category.value})}
            >
              {category.label}
            </button>
          ))}
        </div>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ */}
      <div className="projects-container">
        {loading ? (
          <div className="loading-state">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...</p>
          </div>
        ) : filteredAndSortedProjects.length > 0 ? (
          <>
            <div className="projects-grid">
              {filteredAndSortedProjects.map(project => (
                <ProjectCard key={project.id} project={project} />
              ))}
            </div>
            
            {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
            <div className="pagination">
              <button className="pagination-btn disabled">‚Üê –ù–∞–∑–∞–¥</button>
              <span className="pagination-info">–°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 –∏–∑ 1</span>
              <button className="pagination-btn disabled">–í–ø–µ—Ä–µ–¥ ‚Üí</button>
            </div>
          </>
        ) : (
          <div className="empty-state">
            <div className="empty-icon">üîç</div>
            <h3>–ü—Ä–æ–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</p>
            <button className="btn btn-primary" onClick={clearFilters}>
              –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
            </button>
          </div>
        )}
      </div>
    </div>
  )
}

export default ProjectsPage