// pages/FreelancerProfilePage/FreelancerProfilePage.jsx
import './FreelancerProfilePage.scss'
import { useParams } from 'react-router-dom'
import { useState, useEffect } from 'react'
import PortfolioItem from '../../components/PortfolioItem/PortfolioItem'

function FreelancerProfilePage() {
  const { freelancerId } = useParams()
  const [freelancer, setFreelancer] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    loadFreelancer()
  }, [freelancerId])

  const loadFreelancer = () => {
    try {
      const users = JSON.parse(localStorage.getItem('nexus_users') || '[]')
      const foundFreelancer = users.find(user => user.id === freelancerId && user.role === 'freelancer')
      
      if (foundFreelancer) {
        setFreelancer({
          ...foundFreelancer,
          profile: foundFreelancer.profile || {
            name: foundFreelancer.fullName || '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä',
            bio: '',
            skills: [],
            rating: 5.0,
            completedProjects: 0,
            responseRate: '100%'
          }
        })
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è...</div>
  }

  if (!freelancer) {
    return (
      <div className="profile-not-found">
        <h3>–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</h3>
        <p>–§—Ä–∏–ª–∞–Ω—Å–µ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
      </div>
    )
  }

  const profile = freelancer.profile || {}

  return (
    <div className="freelancer-profile">
      <div className="profile-header">
        <div className="avatar-large">
          {profile.name?.split(' ').map(n => n[0]).join('') || 'F'}
        </div>
        <div className="profile-info">
          <h1>{profile.name}</h1>
          <p className="category">{getCategoryLabel(profile.category)}</p>
          <div className="rating">‚≠ê {profile.rating || '5.0'}</div>
          <p className="bio">{profile.bio}</p>
        </div>
      </div>

      <div className="profile-stats">
        <div className="stat-card">
          <strong>{profile.completedProjects || 0}</strong>
          <span>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</span>
        </div>
        <div className="stat-card">
          <strong>{profile.responseRate || '100%'}</strong>
          <span>–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–∏–∫–æ–≤</span>
        </div>
        <div className="stat-card">
          <strong>{profile.onTimeDelivery || '95%'}</strong>
          <span>–í —Å—Ä–æ–∫</span>
        </div>
      </div>

      {profile.skills && profile.skills.length > 0 && (
        <div className="skills-section">
          <h2>–ù–∞–≤—ã–∫–∏</h2>
          <div className="skills-grid">
            {profile.skills.map((skill, index) => (
              <div key={index} className="skill-item">
                <span className="skill-name">
                  {typeof skill === 'string' ? skill : skill.skill || skill.name}
                </span>
                {typeof skill === 'object' && skill.level && (
                  <span className="skill-level">{getLevelText(skill.level)}</span>
                )}
              </div>
            ))}
          </div>
        </div>
      )}

      <div className="portfolio-section">
        <h2>–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ</h2>
        {profile.portfolio && profile.portfolio.length > 0 ? (
          <div className="portfolio-grid">
            {profile.portfolio.map((item, index) => (
              <PortfolioItem key={index} item={item} />
            ))}
          </div>
        ) : (
          <p className="no-portfolio">–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ</p>
        )}
      </div>
    </div>
  )
}

function getCategoryLabel(category) {
  const categories = {
    development: 'üíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫',
    design: 'üé® –î–∏–∑–∞–π–Ω–µ—Ä', 
    marketing: 'üìä –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥',
    writing: 'üìù –ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä',
    seo: 'üîç SEO-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
    other: 'üîß –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç'
  }
  return categories[category] || '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä'
}

function getLevelText(level) {
  const levels = {
    beginner: '–ù–∞—á–∞–ª—å–Ω—ã–π',
    intermediate: '–°—Ä–µ–¥–Ω–∏–π',
    advanced: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π',
    expert: '–≠–∫—Å–ø–µ—Ä—Ç'
  }
  return levels[level] || level
}

export default FreelancerProfilePage